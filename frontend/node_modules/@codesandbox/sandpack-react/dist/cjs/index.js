'use strict';

var React = require('react');
var classer = require('@code-hike/classer');
var sandpackClient = require('@codesandbox/sandpack-client');
var isEqual = require('lodash.isequal');
var core = require('@stitches/core');
var autocomplete = require('@codemirror/autocomplete');
var commands = require('@codemirror/commands');
var language = require('@codemirror/language');
var state = require('@codemirror/state');
var view = require('@codemirror/view');
var useIntersectionObserver = require('@react-hook/intersection-observer');
var langCss = require('@codemirror/lang-css');
var langHtml = require('@codemirror/lang-html');
var langJavascript = require('@codemirror/lang-javascript');
var highlight = require('@lezer/highlight');
var LZString = require('lz-string');
var cleanSet = require('clean-set');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var isEqual__default = /*#__PURE__*/_interopDefault(isEqual);
var useIntersectionObserver__default = /*#__PURE__*/_interopDefault(useIntersectionObserver);
var LZString__default = /*#__PURE__*/_interopDefault(LZString);
var cleanSet__default = /*#__PURE__*/_interopDefault(cleanSet);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var SVG = function (props) { return (React__namespace.createElement("svg", __assign({ fill: "currentColor", height: "16", viewBox: "0 0 16 16", width: "16", xmlns: "http://www.w3.org/2000/svg" }, props))); };
/**
 * @hidden
 */
var RunIcon = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Run sandbox"),
    React__namespace.createElement("path", { d: "M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z" }))); };
/**
 * @hidden
 */
var BackwardIcon = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Click to go back"),
    React__namespace.createElement("path", { d: "M9.64645 12.3536C9.84171 12.5488 10.1583 12.5488 10.3536 12.3536C10.5488 12.1583 10.5488 11.8417 10.3536 11.6464L9.64645 12.3536ZM10.3536 4.35355C10.5488 4.15829 10.5488 3.84171 10.3536 3.64644C10.1583 3.45118 9.84171 3.45118 9.64645 3.64644L10.3536 4.35355ZM6.07072 7.92929L5.71716 7.57573L6.07072 7.92929ZM10.3536 11.6464L6.42427 7.71716L5.71716 8.42426L9.64645 12.3536L10.3536 11.6464ZM6.42427 8.28284L10.3536 4.35355L9.64645 3.64644L5.71716 7.57573L6.42427 8.28284ZM6.42427 7.71716C6.58048 7.87337 6.58048 8.12663 6.42427 8.28284L5.71716 7.57573C5.48285 7.81005 5.48285 8.18995 5.71716 8.42426L6.42427 7.71716Z" }))); };
/**
 * @hidden
 */
var ForwardIcon = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Click to go forward"),
    React__namespace.createElement("path", { d: "M6.35355 3.64645C6.15829 3.45118 5.84171 3.45118 5.64645 3.64645C5.45118 3.84171 5.45118 4.15829 5.64645 4.35355L6.35355 3.64645ZM5.64645 11.6464C5.45118 11.8417 5.45118 12.1583 5.64645 12.3536C5.84171 12.5488 6.15829 12.5488 6.35355 12.3536L5.64645 11.6464ZM9.92929 8.07071L10.2828 8.42426L9.92929 8.07071ZM5.64645 4.35355L9.57574 8.28284L10.2828 7.57574L6.35355 3.64645L5.64645 4.35355ZM9.57574 7.71716L5.64645 11.6464L6.35355 12.3536L10.2828 8.42426L9.57574 7.71716ZM9.57574 8.28284C9.41952 8.12663 9.41953 7.87337 9.57574 7.71716L10.2828 8.42426C10.5172 8.18995 10.5172 7.81005 10.2828 7.57574L9.57574 8.28284Z" }))); };
/**
 * @hidden
 */
var RefreshIcon = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Refresh preview"),
    React__namespace.createElement("path", { clipRule: "evenodd", d: "M3.83325 7.99992C3.83325 5.69867 5.69853 3.83325 7.99934 3.83325C9.81246 3.83325 11.3563 4.99195 11.9285 6.61097C11.9396 6.6425 11.9536 6.67221 11.97 6.69992H8.80005C8.52391 6.69992 8.30005 6.92378 8.30005 7.19992C8.30005 7.47606 8.52391 7.69992 8.80005 7.69992H12.5667C12.8981 7.69992 13.1667 7.43129 13.1667 7.09992V3.33325C13.1667 3.05711 12.9429 2.83325 12.6667 2.83325C12.3906 2.83325 12.1667 3.05711 12.1667 3.33325V4.94608C11.2268 3.66522 9.7106 2.83325 7.99934 2.83325C5.14613 2.83325 2.83325 5.14651 2.83325 7.99992C2.83325 10.8533 5.14613 13.1666 7.99934 13.1666C9.91218 13.1666 11.5815 12.1266 12.474 10.5836C12.6123 10.3446 12.5306 10.0387 12.2915 9.90044C12.0525 9.76218 11.7466 9.84387 11.6084 10.0829C10.8873 11.3296 9.54072 12.1666 7.99934 12.1666C5.69853 12.1666 3.83325 10.3012 3.83325 7.99992Z", fillRule: "evenodd" }))); };
/**
 * @hidden
 */
var CleanIcon = function () { return (React__namespace.createElement(SVG, { fill: "none", stroke: "currentColor" },
    React__namespace.createElement("title", null, "Clean"),
    React__namespace.createElement("circle", { cx: "7.99998", cy: "8.00004", r: "4.66667", strokeLinecap: "round" }),
    React__namespace.createElement("path", { d: "M4.66669 4.66663L11.3334 11.3333" }))); };
/**
 * @hidden
 */
var ExportIcon = function () { return (React__namespace.createElement(SVG, { fill: "none", stroke: "currentColor" },
    React__namespace.createElement("title", null, "Open on CodeSandbox"),
    React__namespace.createElement("path", { d: "M6.66665 3.33337H4.33331C3.78103 3.33337 3.33331 3.78109 3.33331 4.33337V11.6667C3.33331 12.219 3.78103 12.6667 4.33331 12.6667H11.6666C12.2189 12.6667 12.6666 12.219 12.6666 11.6667V9.33337", strokeLinecap: "round" }),
    React__namespace.createElement("path", { d: "M10 3.33337H12.5667C12.6219 3.33337 12.6667 3.37815 12.6667 3.43337V6.00004", strokeLinecap: "round" }),
    React__namespace.createElement("path", { d: "M7.33331 8.66668L12.5333 3.46667", strokeLinecap: "round" }))); };
/**
 * @hidden
 */
var DirectoryIconOpen = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Directory"),
    React__namespace.createElement("path", { d: "M12.5526 12.6667H3.66675C3.2922 12.6667 2.96575 12.4608 2.79442 12.156L3.81072 8.0908C3.92201 7.64563 4.32199 7.33333 4.78086 7.33333H13.386C14.0365 7.33333 14.5139 7.94472 14.3561 8.57587L13.5228 11.9092C13.4115 12.3544 13.0115 12.6667 12.5526 12.6667Z", fill: "currentColor" }),
    React__namespace.createElement("path", { d: "M13.3334 6.63333V6.33333C13.3334 5.78105 12.8857 5.33333 12.3334 5.33333H8.30286C8.10543 5.33333 7.91242 5.2749 7.74816 5.16538L6.25201 4.16795C6.08774 4.05844 5.89473 4 5.69731 4H3.66675C3.11446 4 2.66675 4.44772 2.66675 5L2.66675 11.6667C2.66675 12.219 3.11446 12.6667 3.66675 12.6667H12.5526C13.0115 12.6667 13.4115 12.3544 13.5228 11.9092L14.3561 8.57587C14.5139 7.94472 14.0365 7.33333 13.386 7.33333H4.78086C4.32199 7.33333 3.92201 7.64563 3.81072 8.0908L2.75008 12.3333", fill: "none", stroke: "currentColor", strokeLinecap: "round" }))); };
var DirectoryIconClosed = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Directory"),
    React__namespace.createElement("path", { d: "M12.3334 12.6667H3.66675C3.11446 12.6667 2.66675 12.219 2.66675 11.6667V5C2.66675 4.44772 3.11446 4 3.66675 4H5.69731C5.89473 4 6.08774 4.05844 6.25201 4.16795L7.74816 5.16538C7.91242 5.2749 8.10543 5.33333 8.30286 5.33333H12.3334C12.8857 5.33333 13.3334 5.78105 13.3334 6.33333V11.6667C13.3334 12.219 12.8857 12.6667 12.3334 12.6667Z", fill: "currentColor", stroke: "currentColor", strokeLinecap: "round" }))); };
/**
 * @hidden
 */
var FileIcon = function () { return (React__namespace.createElement(SVG, { fill: "currentColor" },
    React__namespace.createElement("title", null, "File"),
    React__namespace.createElement("path", { clipRule: "evenodd", d: "M4.5 4.33325C4.5 4.05711 4.72386 3.83325 5 3.83325H8.16675V6.56659C8.16675 6.89795 8.43538 7.16658 8.76675 7.16658H11.5V12.3333C11.5 12.6094 11.2761 12.8333 11 12.8333H5C4.72386 12.8333 4.5 12.6094 4.5 12.3333V4.33325ZM12.5 6.67568C12.5001 6.67265 12.5001 6.66962 12.5001 6.66658C12.5001 6.66355 12.5001 6.66052 12.5 6.65749V6.41413C12.5 6.01631 12.342 5.63478 12.0607 5.35347L9.97978 3.27259C9.69848 2.99129 9.31694 2.83325 8.91912 2.83325H8.66675H5C4.17157 2.83325 3.5 3.50483 3.5 4.33325V12.3333C3.5 13.1617 4.17157 13.8333 5 13.8333H11C11.8284 13.8333 12.5 13.1617 12.5 12.3333V6.67568ZM9.16675 3.89888C9.20518 3.92078 9.24085 3.94787 9.27267 3.9797L11.3536 6.06058C11.3854 6.09243 11.4125 6.12813 11.4344 6.16658H9.16675V3.89888Z", fillRule: "evenodd" }))); };
/**
 * @hidden
 */
var CloseIcon = function () { return (React__namespace.createElement(SVG, { stroke: "currentColor" },
    React__namespace.createElement("title", null, "Close file"),
    React__namespace.createElement("path", { d: "M12 4L4 12", strokeLinecap: "round" }),
    React__namespace.createElement("path", { d: "M4 4L12 12", strokeLinecap: "round" }))); };
/**
 * @hidden
 */
var ConsoleIcon = function () { return (React__namespace.createElement(SVG, null,
    React__namespace.createElement("title", null, "Open browser console"),
    React__namespace.createElement("path", { d: "M5.65871 3.62037C5.44905 3.44066 5.1334 3.46494 4.95368 3.6746C4.77397 3.88427 4.79825 4.19992 5.00792 4.37963L5.65871 3.62037ZM5.00792 11.6204C4.79825 11.8001 4.77397 12.1157 4.95368 12.3254C5.1334 12.5351 5.44905 12.5593 5.65871 12.3796L5.00792 11.6204ZM9.9114 7.92407L10.2368 7.54445L9.9114 7.92407ZM5.00792 4.37963L9.586 8.3037L10.2368 7.54445L5.65871 3.62037L5.00792 4.37963ZM9.586 7.6963L5.00792 11.6204L5.65871 12.3796L10.2368 8.45555L9.586 7.6963ZM9.586 8.3037C9.39976 8.14407 9.39976 7.85594 9.586 7.6963L10.2368 8.45555C10.5162 8.2161 10.5162 7.7839 10.2368 7.54445L9.586 8.3037Z" }),
    React__namespace.createElement("path", { d: "M10 11.5C9.72386 11.5 9.5 11.7239 9.5 12C9.5 12.2761 9.72386 12.5 10 12.5V11.5ZM14.6667 12.5C14.9428 12.5 15.1667 12.2761 15.1667 12C15.1667 11.7239 14.9428 11.5 14.6667 11.5V12.5ZM10 12.5H14.6667V11.5H10V12.5Z" }))); };

var _a$8;
/**
 * @category Theme
 */
var defaultLight = {
    colors: {
        surface1: "#ffffff",
        surface2: "#EFEFEF",
        surface3: "#F3F3F3",
        disabled: "#C5C5C5",
        base: "#323232",
        clickable: "#808080",
        hover: "#4D4D4D",
        accent: "#3973E0",
        error: "#EA3323",
        errorSurface: "#FCF1F0",
        warning: "#6A4516",
        warningSurface: "#FEF2C0"
    },
    syntax: {
        plain: "#151515",
        comment: { color: "#999", fontStyle: "italic" },
        keyword: "#7C5AE3",
        tag: "#0971F1",
        punctuation: "#3B3B3B",
        definition: "#85A600",
        property: "#3B3B3B",
        static: "#3B3B3B",
        string: "#2E6BD0"
    },
    font: {
        body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
        mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
        size: "13px",
        lineHeight: "20px"
    }
};
/**
 * @category Theme
 */
var defaultDark = {
    colors: {
        surface1: "#151515",
        surface2: "#252525",
        surface3: "#2F2F2F",
        disabled: "#4D4D4D",
        base: "#808080",
        clickable: "#999999",
        hover: "#C5C5C5",
        accent: "#E5E5E5",
        error: "#FFB4A6",
        errorSurface: "#690000",
        warning: "#E7C400",
        warningSurface: "#3A3000"
    },
    syntax: {
        plain: "#FFFFFF",
        comment: { color: "#757575", fontStyle: "italic" },
        keyword: "#77B7D7",
        tag: "#DFAB5C",
        punctuation: "#ffffff",
        definition: "#86D9CA",
        property: "#77B7D7",
        static: "#C64640",
        string: "#977CDC"
    },
    font: {
        body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
        mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
        size: "13px",
        lineHeight: "20px"
    }
};
/**
 * @category Theme
 */
var SANDPACK_THEMES = {
    light: defaultLight,
    dark: defaultDark,
    auto: typeof window !== "undefined"
        ? ((_a$8 = window === null || window === void 0 ? void 0 : window.matchMedia) === null || _a$8 === void 0 ? void 0 : _a$8.call(window, "(prefers-color-scheme: dark)").matches)
            ? defaultDark
            : defaultLight
        : defaultLight
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var classNames = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return args.filter(Boolean).join(" ");
};

var getFileName = function (filePath) {
    var lastIndexOfSlash = filePath.lastIndexOf("/");
    return filePath.slice(lastIndexOfSlash + 1);
};
var calculateNearestUniquePath = function (currentPath, otherPaths) {
    var currentPathParts = (currentPath[0] === "/" ? currentPath.slice(1) : currentPath).split("/");
    var resultPathParts = [];
    // If path is on root, there are no parts to loop through
    if (currentPathParts.length === 1) {
        resultPathParts.unshift(currentPathParts[0]);
    }
    else {
        // Loop over all other paths to find a unique path
        for (var fileIndex = 0; fileIndex < otherPaths.length; fileIndex++) {
            // We go over each part of the path from end to start to find the closest unique directory
            var otherPathParts = otherPaths[fileIndex].split("/");
            for (var partsFromEnd = 1; partsFromEnd <= currentPathParts.length; partsFromEnd++) {
                var currentPathPart = currentPathParts[currentPathParts.length - partsFromEnd];
                var otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd];
                // If this part hasn't been added to the result path, we add it here
                if (resultPathParts.length < partsFromEnd) {
                    resultPathParts.unshift(currentPathPart);
                }
                // If this part is different between the current path and other path we break
                // as from this moment the current path is unique compared to this other path
                if (currentPathPart !== otherPathPart) {
                    break;
                }
            }
        }
    }
    // Add `..` if this is a relative path
    if (resultPathParts.length < currentPathParts.length) {
        resultPathParts.unshift("..");
    }
    // Join the result path parts into a path string
    return resultPathParts.join("/");
};
// Checks both rgb and hex colors for contrast and returns true if the color is in the dark spectrum
var isDarkColor = function (color) {
    var r = 0;
    var g = 0;
    var b = 0;
    if (color.startsWith("#")) {
        if (color.length < 7) {
            return true;
        }
        r = parseInt(color.substr(1, 2), 16);
        g = parseInt(color.substr(3, 2), 16);
        b = parseInt(color.substr(5, 2), 16);
    }
    else {
        var rgbValues = color
            .replace("rgb(", "")
            .replace("rgba(", "")
            .replace(")", "")
            .split(",");
        if (rgbValues.length < 3) {
            return true;
        }
        r = parseInt(rgbValues[0], 10);
        g = parseInt(rgbValues[1], 10);
        b = parseInt(rgbValues[2], 10);
    }
    var yiq = (r * 299 + g * 587 + b * 114) / 1000;
    return yiq < 128;
};
var generateRandomId = function () {
    return Math.floor(Math.random() * 10000).toString();
};

var toString = function () { return ""; };
var doubleToString = function () { return toString; };
var defineProperty = Object.getOwnPropertyDescriptors({ toString: toString });
Object.defineProperties(toString, defineProperty);
Object.defineProperties(doubleToString, defineProperty);
var createStitchesMock = {
    createTheme: toString,
    css: doubleToString,
    getCssText: toString,
    keyframes: doubleToString
};

var _a$7;
/**
 * @category Theme
 */
var THEME_PREFIX = "sp";
var getNodeProcess = function () {
    if (typeof process !== "undefined") {
        return process.env.SANDPACK_BARE_COMPONENTS;
    }
    return false;
};
/**
 * @category Theme
 */
var createTheme = (_a$7 = getNodeProcess()
    ? createStitchesMock
    : core.createStitches({
        prefix: THEME_PREFIX
    }), _a$7.createTheme), css = _a$7.css, getCssText = _a$7.getCssText, keyframes = _a$7.keyframes;
var defaultVariables = {
    space: new Array(11).fill(" ").reduce(function (acc, _, index) {
        var _a;
        return __assign(__assign({}, acc), (_a = {}, _a[index + 1] = (index + 1) * 4 + "px", _a));
    }, {}),
    border: { radius: "4px" },
    layout: { height: "300px", headerHeight: "40px" },
    transitions: { "default": "150ms ease" },
    zIndices: {
        base: "1",
        overlay: "2",
        top: "3"
    }
};
/**
 * @category Theme
 */
var standardizeStitchesTheme = function (theme) {
    // Flat values
    var syntaxEntries = Object.entries(theme.syntax);
    var syntax = syntaxEntries.reduce(function (tokenAcc, _a) {
        var _b;
        var tokenName = _a[0], tokenValue = _a[1];
        // Single property
        var newValues = (_b = {}, _b["color-" + tokenName] = tokenValue, _b);
        // Multiples properties
        if (typeof tokenValue === "object") {
            newValues = Object.entries(tokenValue).reduce(function (valueAcc, _a) {
                var _b;
                var styleProp = _a[0], styleValue = _a[1];
                return __assign(__assign({}, valueAcc), (_b = {}, _b[styleProp + "-" + tokenName] = styleValue, _b));
            }, {});
        }
        return __assign(__assign({}, tokenAcc), newValues);
    }, {});
    return __assign(__assign({}, defaultVariables), { colors: theme.colors, font: theme.font, syntax: syntax });
};
/**
 * @category Theme
 */
var standardizeTheme = function (inputTheme) {
    var _a, _b, _c, _d, _e;
    if (inputTheme === void 0) { inputTheme = "light"; }
    var defaultLightThemeKey = "default";
    /**
     * Set a local theme: dark or light
     */
    if (typeof inputTheme === "string") {
        var predefinedTheme = SANDPACK_THEMES[inputTheme];
        if (!predefinedTheme) {
            throw new Error("[sandpack-react]: invalid theme '" + inputTheme + "' provided.");
        }
        return {
            theme: predefinedTheme,
            id: inputTheme,
            mode: "light"
        };
    }
    /**
     * Fullfill the colors key, in case it's missing any key
     */
    var mode = isDarkColor((_b = (_a = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) === null || _a === void 0 ? void 0 : _a.surface1) !== null && _b !== void 0 ? _b : defaultLight.colors.surface1)
        ? "dark"
        : "light";
    /**
     * Figure out what's the properly default colors it should be
     * error, warning and success colors have different values between dark and light
     */
    var baseTheme = mode === "dark" ? defaultDark : defaultLight;
    var colorsByMode = __assign(__assign({}, baseTheme.colors), ((_c = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) !== null && _c !== void 0 ? _c : {}));
    var syntaxByMode = __assign(__assign({}, baseTheme.syntax), ((_d = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.syntax) !== null && _d !== void 0 ? _d : {}));
    var fontByMode = __assign(__assign({}, baseTheme.font), ((_e = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.font) !== null && _e !== void 0 ? _e : {}));
    var theme = {
        colors: colorsByMode,
        syntax: syntaxByMode,
        font: fontByMode
    };
    var id = inputTheme
        ? simpleHashFunction(JSON.stringify(theme))
        : defaultLightThemeKey;
    return {
        theme: theme,
        id: "sp-" + id,
        mode: mode
    };
};
var simpleHashFunction = function (str) {
    var hash = 0;
    for (var i = 0; i < str.length; hash &= hash) {
        hash = 31 * hash + str.charCodeAt(i++);
    }
    return Math.abs(hash);
};

var wrapperClassName$2 = css({
    all: "initial",
    fontSize: "$font$size",
    fontFamily: "$font$body",
    display: "block",
    boxSizing: "border-box",
    textRendering: "optimizeLegibility",
    WebkitTapHighlightColor: "transparent",
    WebkitFontSmoothing: "subpixel-antialiased",
    variants: {
        variant: {
            dark: { colorScheme: "dark" },
            light: { colorScheme: "light" }
        }
    },
    "@media screen and (min-resolution: 2dppx)": {
        WebkitFontSmoothing: "antialiased",
        MozOsxFontSmoothing: "grayscale"
    },
    "*": { boxSizing: "border-box" },
    ".sp-wrapper:focus": { outline: "0" }
});
/**
 * @hidden
 */
var SandpackThemeContext = React__namespace.createContext({
    theme: defaultLight,
    id: "light",
    mode: "light"
});
/**
 * @category Theme
 */
var SandpackThemeProvider = function (_a) {
    var themeFromProps = _a.theme, children = _a.children, className = _a.className, props = __rest(_a, ["theme", "children", "className"]);
    var _b = standardizeTheme(themeFromProps), theme = _b.theme, id = _b.id, mode = _b.mode;
    var c = classer.useClasser(THEME_PREFIX);
    var themeClassName = React__namespace.useMemo(function () {
        return createTheme(id, standardizeStitchesTheme(theme));
    }, [theme, id]);
    return (React__namespace.createElement(SandpackThemeContext.Provider, { value: { theme: theme, id: id, mode: mode } },
        React__namespace.createElement("div", __assign({ className: classNames(c("wrapper"), themeClassName.toString(), wrapperClassName$2({ variant: mode }), className) }, props), children)));
};
/**
 * @hidden
 */
var SandpackThemeConsumer = SandpackThemeContext.Consumer;

/**
 * @hidden
 */
var ANGULAR_TEMPLATE = {
    files: {
        "/src/app/app.component.css": {
            code: "div {\n  text-align: center;\n}        \n"
        },
        "/src/app/app.component.html": {
            code: "<div>\n<h1>{{ helloWorld }}</h1>\n</div>     \n"
        },
        "/src/app/app.component.ts": {
            code: "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  helloWorld = \"Hello World\";\n}           \n"
        },
        "/src/app/app.module.ts": {
            code: "import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n      \nimport { AppComponent } from \"./app.component\";\n      \n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}       \n"
        },
        "/src/index.html": {
            code: "<!doctype html>\n<html lang=\"en\">\n      \n<head>\n  <meta charset=\"utf-8\">\n  <title>Angular</title>\n  <base href=\"/\">\n      \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n      \n<body>\n   <app-root></app-root>\n</body>\n      \n</html>\n"
        },
        "/src/main.ts": {
            code: "import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n      \nimport { AppModule } from \"./app/app.module\";      \n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n      \n"
        },
        "/src/polyfills.ts": {
            code: "import \"core-js/proposals/reflect-metadata\";   \n      import \"zone.js/dist/zone\";\n"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {
                    "@angular/core": "^11.2.0",
                    "@angular/platform-browser": "^11.2.0",
                    "@angular/platform-browser-dynamic": "^11.2.0",
                    "@angular/common": "^11.2.0",
                    "@angular/compiler": "^11.2.0",
                    "zone.js": "0.11.3",
                    "core-js": "3.8.3",
                    rxjs: "6.6.3"
                },
                main: "/src/main.ts"
            })
        }
    },
    main: "/src/app/app.component.ts",
    environment: "angular-cli"
};

/**
 * @hidden
 */
var REACT_TEMPLATE = {
    files: {
        "/App.js": {
            code: "export default function App() {\n  return <h1>Hello World</h1>\n}\n"
        },
        "/index.js": {
            code: "import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"
        },
        "/styles.css": {
            code: "body {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n\nh1 {\n  font-size: 1.5rem;\n}"
        },
        "/public/index.html": {
            code: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {
                    react: "^18.0.0",
                    "react-dom": "^18.0.0",
                    "react-scripts": "^4.0.0"
                },
                main: "/index.js"
            })
        }
    },
    main: "/App.js",
    environment: "create-react-app"
};

/**
 * @hidden
 */
var REACT_TYPESCRIPT_TEMPLATE = {
    files: {
        "tsconfig.json": {
            code: "{\n  \"include\": [\n    \"./**/*\"\n  ],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [ \"dom\", \"es2015\" ],\n    \"jsx\": \"react-jsx\"\n  }\n}"
        },
        "/App.tsx": {
            code: "export default function App(): JSX.Element {\n  return <h1>Hello World</h1>\n}\n"
        },
        "/index.tsx": {
            code: "import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"
        },
        "/styles.css": {
            code: "body {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n\nh1 {\n  font-size: 1.5rem;\n}"
        },
        "/public/index.html": {
            code: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {
                    react: "^18.0.0",
                    "react-dom": "^18.0.0",
                    "react-scripts": "^4.0.0"
                },
                devDependencies: {
                    "@types/react": "^18.0.0",
                    "@types/react-dom": "^18.0.0",
                    typescript: "^4.0.0"
                },
                main: "/index.tsx"
            })
        }
    },
    main: "/App.tsx",
    environment: "create-react-app"
};

/**
 * @hidden
 */
var SOLID_TEMPLATE = {
    files: {
        "/App.tsx": {
            code: "import { Component } from \"solid-js\";\n\nconst App: Component = () => {\n  return <h1>Hello World</h1>;\n};\n\nexport default App;"
        },
        "/index.tsx": {
            code: "import { render } from \"solid-js/web\";\nimport App from \"./App\";\n\nimport \"./styles.css\";\n\nrender(() => <App />, document.getElementById(\"app\"));"
        },
        "/styles.css": {
            code: "body {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n\nh1 {\n  font-size: 1.5rem;\n}"
        },
        "/index.html": {
            code: "<html>\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset=\"UTF-8\" />\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"src/index.tsx\"></script>\n</body>\n</html>"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {
                    "solid-js": "1.3.15"
                },
                main: "/index.tsx"
            })
        }
    },
    main: "/App.tsx",
    environment: "solid"
};

/**
 * @hidden
 */
var SVELTE_TEMPLATE = {
    files: {
        "/App.svelte": {
            code: "<style>\n  main {\n    font-family: sans-serif;\n    text-align: center;\n  }\n</style>\n\n<script>\n  let name = 'World';\n</script>\n\n<main>\n  <h1>Hello {name}</h1>\n</main>"
        },
        "/index.js": {
            code: "import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;\n      "
        },
        "/public/index.html": {
            code: "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <title>Svelte app</title>\n\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {
                    svelte: "^3.0.0"
                },
                main: "/index.js"
            })
        }
    },
    main: "/index.js",
    environment: "svelte"
};

/**
 * @hidden
 */
var TEST_TYPESCRIPT_TEMPLATE = {
    files: {
        "tsconfig.json": {
            code: "{\n  \"include\": [\n    \"./**/*\"\n  ],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [ \"dom\", \"es2015\" ],\n    \"jsx\": \"react-jsx\"\n  }\n}"
        },
        "/add.ts": {
            code: "export const add = (a: number, b: number): number => a + b;"
        },
        "/add.test.ts": {
            code: "import { add } from './add';\n\ndescribe('add', () => {\n  test('Commutative Law of Addition', () => {\n    expect(add(1, 2)).toBe(add(2, 1));\n  });\n});"
        },
        "package.json": {
            code: JSON.stringify({
                dependencies: {},
                devDependencies: { typescript: "^4.0.0" },
                main: "/add.ts"
            })
        }
    },
    main: "/add.test.ts",
    environment: "parcel",
    mode: "tests"
};

/**
 * @hidden
 */
var VANILLA_TEMPLATE = {
    files: {
        "/src/index.js": {
            code: "import \"./styles.css\";\n\ndocument.getElementById(\"app\").innerHTML = `\n<h1>Hello World</h1>\n<div>\n  We use the same configuration as Parcel to bundle this sandbox, you can find more\n  info about Parcel \n  <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n</div>\n`;\n"
        },
        "/src/styles.css": {
            code: "body {\n  font-family: sans-serif;\n}\n      "
        },
        "/index.html": {
            code: "<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset=\"UTF-8\" />\n</head>\n\n<body>\n  <div id=\"app\"></div>\n\n  <script src=\"src/index.js\">\n  </script>\n</body>\n\n</html>"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {},
                main: "/src/index.js"
            })
        }
    },
    main: "/src/index.js",
    environment: "parcel"
};

/**
 * @hidden
 */
var VANILLA_TYPESCRIPT_TEMPLATE = {
    files: {
        "tsconfig.json": {
            code: "{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"module\": \"commonjs\",\n    \"jsx\": \"preserve\",\n    \"esModuleInterop\": true,\n    \"sourceMap\": true,\n    \"allowJs\": true,\n    \"lib\": [\n      \"es6\",\n      \"dom\"\n    ],\n    \"rootDir\": \"src\",\n    \"moduleResolution\": \"node\"\n  }\n}"
        },
        "/src/index.ts": {
            code: "import \"./styles.css\";\n\ndocument.getElementById(\"app\").innerHTML = `\n<h1>Hello World</h1>\n<div>\n  We use the same configuration as Parcel to bundle this sandbox, you can find more\n  info about Parcel \n  <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n</div>\n`;\n"
        },
        "/src/styles.css": {
            code: "body {\n  font-family: sans-serif;\n}\n      "
        },
        "/index.html": {
            code: "<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset=\"UTF-8\" />\n</head>\n\n<body>\n  <div id=\"app\"></div>\n\n  <script src=\"src/index.ts\">\n  </script>\n</body>\n\n</html>"
        },
        "/package.json": {
            code: JSON.stringify({
                dependencies: {},
                devDependencies: {
                    typescript: "^4.0.0"
                },
                main: "/src/index.ts"
            })
        }
    },
    main: "/src/index.ts",
    environment: "parcel"
};

/**
 * @hidden
 */
var VUE_TEMPLATE = {
    files: {
        "/src/App.vue": {
            code: "<template>\n  <div id=\"app\">\n    <h1>Hello {{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue';\n\nexport default Vue.extend({\n  name: \"App\",\n  data() {\n    return {\n      msg: \"World\",\n    };\n  },\n});\n</script>"
        },
        "/src/main.js": {
            code: "import Vue from \"vue\";\nimport App from \"./App.vue\";\nVue.config.productionTip = false;\n\nnew Vue({\n  render: h => h(App)\n}).$mount(\"#app\");\n"
        },
        "/public/index.html": {
            code: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n    <title>codesandbox</title>\n  </head>\n  <body>\n    <noscript>\n      <strong\n        >We're sorry but codesandbox doesn't work properly without JavaScript\n        enabled. Please enable it to continue.</strong\n      >\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n"
        },
        "/package.json": {
            code: JSON.stringify({
                name: "vue",
                version: "0.1.0",
                private: true,
                main: "/src/main.js",
                scripts: {
                    serve: "vue-cli-service serve",
                    build: "vue-cli-service build"
                },
                dependencies: {
                    "core-js": "^3.26.1",
                    vue: "^2.7.14"
                },
                devDependencies: {
                    "@vue/cli-plugin-babel": "^5.0.8",
                    "@vue/cli-service": "^5.0.8",
                    "vue-template-compiler": "^2.7.14"
                }
            })
        }
    },
    main: "/src/App.vue",
    environment: "vue-cli"
};

/**
 * @hidden
 */
var VUE_TEMPLATE_3 = {
    files: {
        "/src/App.vue": {
            code: "<template>\n  <h1>Hello {{ msg }}</h1>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst msg = ref('World');\n</script>"
        },
        "/src/main.js": {
            code: "import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')\n"
        },
        "/public/index.html": {
            code: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title>codesandbox</title>\n  </head>\n  <body>\n    <noscript>\n      <strong\n        >We're sorry but codesandbox doesn't work properly without JavaScript\n        enabled. Please enable it to continue.</strong\n      >\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n"
        },
        "/package.json": {
            code: JSON.stringify({
                name: "vue3",
                version: "0.1.0",
                private: true,
                main: "/src/main.js",
                scripts: {
                    serve: "vue-cli-service serve",
                    build: "vue-cli-service build"
                },
                dependencies: {
                    "core-js": "^3.26.1",
                    vue: "^3.2.45"
                },
                devDependencies: {
                    "@vue/cli-plugin-babel": "^5.0.8",
                    "@vue/cli-service": "^5.0.8"
                }
            })
        }
    },
    main: "/src/App.vue",
    environment: "vue-cli"
};

/**
 * @hidden
 */
var VUE_TS_TEMPLATE_3 = {
    files: {
        "/src/App.vue": {
            code: "<template>\n  <h1>Hello {{ msg }}</h1>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\n\nconst msg = ref<string>('World');\n</script>"
        },
        "/src/main.ts": {
            code: "import { createApp } from 'vue'\nimport App from './App.vue'\ncreateApp(App).mount('#app')\n"
        },
        "/src/shims-vue.d.ts": "/* eslint-disable */\ndeclare module \"*.vue\" {\n  import type { DefineComponent } from \"vue\";\n  const component: DefineComponent<{}, {}, any>;\n  export default component;\n}",
        "/public/index.html": {
            code: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title>codesandbox</title>\n  </head>\n  <body>\n    <noscript>\n      <strong\n        >We're sorry but codesandbox doesn't work properly without JavaScript\n        enabled. Please enable it to continue.</strong\n      >\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n"
        },
        "/package.json": {
            code: JSON.stringify({
                name: "vue3-ts",
                version: "0.1.0",
                private: true,
                main: "/src/main.ts",
                scripts: {
                    serve: "vue-cli-service serve",
                    build: "vue-cli-service build"
                },
                dependencies: {
                    "core-js": "^3.26.1",
                    vue: "^3.2.45"
                },
                devDependencies: {
                    "@vue/cli-plugin-babel": "^5.0.8",
                    "@vue/cli-plugin-typescript": "^5.0.8",
                    "@vue/cli-service": "^5.0.8",
                    typescript: "^4.9.3"
                }
            })
        },
        "/tsconfig.json": {
            code: JSON.stringify({
                compilerOptions: {
                    target: "esnext",
                    module: "esnext",
                    strict: true,
                    jsx: "preserve",
                    moduleResolution: "node",
                    experimentalDecorators: true,
                    skipLibCheck: true,
                    esModuleInterop: true,
                    allowSyntheticDefaultImports: true,
                    forceConsistentCasingInFileNames: true,
                    useDefineForClassFields: true,
                    sourceMap: false,
                    baseUrl: ".",
                    types: ["webpack-env"],
                    paths: {
                        "@/*": ["src/*"]
                    },
                    lib: ["esnext", "dom", "dom.iterable", "scripthost"]
                },
                include: [
                    "src/**/*.ts",
                    "src/**/*.tsx",
                    "src/**/*.vue",
                    "tests/**/*.ts",
                    "tests/**/*.tsx",
                ],
                exclude: ["node_modules"]
            })
        }
    },
    main: "/src/App.vue",
    environment: "vue-cli"
};

/**
 * @hidden
 */
var SANDBOX_TEMPLATES = {
    react: REACT_TEMPLATE,
    "react-ts": REACT_TYPESCRIPT_TEMPLATE,
    vue: VUE_TEMPLATE,
    vanilla: VANILLA_TEMPLATE,
    "vanilla-ts": VANILLA_TYPESCRIPT_TEMPLATE,
    vue3: VUE_TEMPLATE_3,
    "vue3-ts": VUE_TS_TEMPLATE_3,
    angular: ANGULAR_TEMPLATE,
    svelte: SVELTE_TEMPLATE,
    solid: SOLID_TEMPLATE,
    "test-ts": TEST_TYPESCRIPT_TEMPLATE
};

/**
 * Creates a standard sandpack state given the setup,
 * options, and files props. Using this function is
 * the reliable way to ensure a consistent and predictable
 * sandpack-content throughout application
 */
var getSandpackStateFromProps = function (props) {
    var _a, _b, _c, _d, _e, _f;
    var normalizedFilesPath = sandpackClient.normalizePath(props.files);
    // Merge predefined template with custom setup
    var projectSetup = combineTemplateFilesToSetup({
        template: props.template,
        customSetup: props.customSetup,
        files: normalizedFilesPath
    });
    // visibleFiles and activeFile override the setup flags
    var visibleFiles = sandpackClient.normalizePath((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.visibleFiles) !== null && _b !== void 0 ? _b : []);
    var activeFile = ((_c = props.options) === null || _c === void 0 ? void 0 : _c.activeFile)
        ? resolveFile((_d = props.options) === null || _d === void 0 ? void 0 : _d.activeFile, projectSetup.files)
        : undefined;
    if (visibleFiles.length === 0 && normalizedFilesPath) {
        // extract open and active files from the custom input files
        Object.keys(normalizedFilesPath).forEach(function (filePath) {
            var file = normalizedFilesPath[filePath];
            if (typeof file === "string") {
                visibleFiles.push(filePath);
                return;
            }
            if (!activeFile && file.active) {
                activeFile = filePath;
                if (file.hidden === true) {
                    visibleFiles.push(filePath); // active file needs to be available even if someone sets it as hidden by accident
                }
            }
            if (!file.hidden) {
                visibleFiles.push(filePath);
            }
        });
    }
    if (visibleFiles.length === 0) {
        // If no files are received, use the project setup / template
        visibleFiles = [projectSetup.main];
    }
    // Make sure it resolves the entry file
    if (projectSetup.entry && !projectSetup.files[projectSetup.entry]) {
        /* eslint-disable */
        // @ts-ignore
        projectSetup.entry = resolveFile(projectSetup.entry, projectSetup.files);
        /* eslint-enable */
    }
    if (!activeFile && projectSetup.main) {
        activeFile = projectSetup.main;
    }
    // If no activeFile is specified, use the first open file
    if (!activeFile || !projectSetup.files[activeFile]) {
        activeFile = visibleFiles[0];
    }
    // If for whatever reason the active path was not set as open, set it
    if (!visibleFiles.includes(activeFile)) {
        visibleFiles.push(activeFile);
    }
    var files = sandpackClient.addPackageJSONIfNeeded(projectSetup.files, (_e = projectSetup.dependencies) !== null && _e !== void 0 ? _e : {}, (_f = projectSetup.devDependencies) !== null && _f !== void 0 ? _f : {}, projectSetup.entry);
    var existOpenPath = visibleFiles.filter(function (path) { return files[path]; });
    return {
        visibleFiles: existOpenPath,
        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
        activeFile: activeFile,
        files: files,
        environment: projectSetup.environment
    };
};
/**
 * Given a file tree and a file, it uses a couple of rules
 * to tweak the filename to match with one of the inside of file tree
 *
 * - Adds the leading slash;
 * - Tries to find the same filename with different extensions (js only);
 * - Returns `null` if it doesn't satisfy any rule
 */
var resolveFile = function (path, files) {
    var normalizedFilesPath = sandpackClient.normalizePath(files);
    var normalizedPath = sandpackClient.normalizePath(path);
    if (normalizedPath in normalizedFilesPath) {
        return normalizedPath;
    }
    if (!path) {
        return null;
    }
    var resolvedPath = null;
    var index = 0;
    var strategies = [".js", ".jsx", ".ts", ".tsx"];
    while (!resolvedPath && index < strategies.length) {
        var removeExtension = normalizedPath.split(".")[0];
        var attemptPath = "" + removeExtension + strategies[index];
        if (normalizedFilesPath[attemptPath] !== undefined) {
            resolvedPath = attemptPath;
        }
        index++;
    }
    return resolvedPath;
};
/**
 * The template is predefined (eg: react, vue, vanilla)
 * The setup can overwrite anything from the template
 * (eg: files, dependencies, environment, etc.)
 */
var combineTemplateFilesToSetup = function (_a) {
    var files = _a.files, template = _a.template, customSetup = _a.customSetup;
    if (!template) {
        // If not input, default to vanilla
        if (!customSetup) {
            return SANDBOX_TEMPLATES.vanilla;
        }
        if (!files || Object.keys(files).length === 0) {
            throw new Error("[sandpack-react]: without a template, you must pass at least one file");
        }
        // If not template specified, use the setup entirely
        return __assign(__assign({}, customSetup), { files: convertedFilesToBundlerFiles(files) });
    }
    var baseTemplate = SANDBOX_TEMPLATES[template];
    if (!baseTemplate) {
        throw new Error("[sandpack-react]: invalid template \"" + template + "\" provided");
    }
    // If no setup and not files, the template is used entirely
    if (!customSetup && !files) {
        return baseTemplate;
    }
    // Merge the setup on top of the template
    return {
        /**
         * The input setup might have files in the simple form Record<string, string>
         * so we convert them to the sandbox template format
         */
        files: convertedFilesToBundlerFiles(__assign(__assign({}, baseTemplate.files), files)),
        /**
         * Merge template dependencies and user custom dependencies.
         * As a rule, the custom dependencies must overwrite the template ones.
         */
        dependencies: __assign(__assign({}, baseTemplate.dependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.dependencies),
        devDependencies: __assign(__assign({}, baseTemplate.devDependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.devDependencies),
        entry: sandpackClient.normalizePath(customSetup === null || customSetup === void 0 ? void 0 : customSetup.entry),
        main: baseTemplate.main,
        environment: (customSetup === null || customSetup === void 0 ? void 0 : customSetup.environment) || baseTemplate.environment
    };
};
/**
 * Transform an regular object, which contain files to
 * an object that sandpack-client can understand
 *
 * From: Record<string, string>
 * To: Record<string, { code: string }>
 */
var convertedFilesToBundlerFiles = function (files) {
    if (!files)
        return {};
    return Object.keys(files).reduce(function (acc, key) {
        if (typeof files[key] === "string") {
            acc[key] = { code: files[key] };
        }
        else {
            acc[key] = files[key];
        }
        return acc;
    }, {});
};

/**
 * @category Provider
 */
var Sandpack$1 = React__namespace.createContext(null);
var BUNDLER_TIMEOUT = 30000; // 30 seconds timeout for the bundler to respond.
/**
 * Main context provider that should wraps your entire component.
 * Use * [`useSandpack`](/api/react/#usesandpack) hook, which gives you the entire context object to play with.
 *
 * @category Provider
 * @hidden
 */
var SandpackProviderClass = /** @class */ (function (_super) {
    __extends(SandpackProviderClass, _super);
    function SandpackProviderClass(props) {
        var _a, _b, _c, _d;
        var _this = _super.call(this, props) || this;
        _this.timeoutHook = null;
        _this.initializeSandpackIframeHook = null;
        _this.handleMessage = function (msg) {
            if (_this.timeoutHook) {
                clearTimeout(_this.timeoutHook);
            }
            if (msg.type === "state") {
                _this.setState({ bundlerState: msg.state });
            }
            else if (msg.type === "done" && !msg.compilatonError) {
                _this.setState({ error: null });
            }
            else if (msg.type === "action" && msg.action === "show-error") {
                _this.setState({ error: sandpackClient.extractErrorDetails(msg) });
            }
            else if (msg.type === "action" &&
                msg.action === "notification" &&
                msg.notificationType === "error") {
                _this.setState({
                    error: { message: msg.title }
                });
            }
        };
        _this.registerReactDevTools = function (value) {
            _this.setState({ reactDevTools: value });
        };
        _this.updateCurrentFile = function (code) {
            _this.updateFile(_this.state.activeFile, code);
        };
        _this.updateFile = function (pathOrFiles, code) {
            var _a;
            var _b;
            var files = _this.state.files;
            if (typeof pathOrFiles === "string") {
                if (((_b = _this.state.files[pathOrFiles]) === null || _b === void 0 ? void 0 : _b.code) &&
                    code === _this.state.files[pathOrFiles].code) {
                    return;
                }
                files = __assign(__assign({}, files), (_a = {}, _a[pathOrFiles] = { code: code !== null && code !== void 0 ? code : "" }, _a));
            }
            else if (typeof pathOrFiles === "object") {
                files = __assign(__assign({}, files), convertedFilesToBundlerFiles(pathOrFiles));
            }
            _this.setState({ files: sandpackClient.normalizePath(files) }, _this.updateClients);
        };
        _this.updateClients = function () {
            var _a, _b, _c, _d;
            var _e = _this.state, files = _e.files, sandpackStatus = _e.sandpackStatus;
            var recompileMode = (_b = (_a = _this.props.options) === null || _a === void 0 ? void 0 : _a.recompileMode) !== null && _b !== void 0 ? _b : "delayed";
            var recompileDelay = (_d = (_c = _this.props.options) === null || _c === void 0 ? void 0 : _c.recompileDelay) !== null && _d !== void 0 ? _d : 500;
            if (sandpackStatus !== "running") {
                return;
            }
            if (recompileMode === "immediate") {
                Object.values(_this.clients).forEach(function (client) {
                    client.updatePreview({
                        files: files
                    });
                });
            }
            if (recompileMode === "delayed") {
                window.clearTimeout(_this.debounceHook);
                _this.debounceHook = window.setTimeout(function () {
                    Object.values(_this.clients).forEach(function (client) {
                        client.updatePreview({
                            files: _this.state.files
                        });
                    });
                }, recompileDelay);
            }
        };
        _this.createClient = function (iframe, clientId) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            var client = new sandpackClient.SandpackClient(iframe, {
                files: _this.state.files,
                template: _this.state.environment
            }, {
                externalResources: (_a = _this.props.options) === null || _a === void 0 ? void 0 : _a.externalResources,
                bundlerURL: (_b = _this.props.options) === null || _b === void 0 ? void 0 : _b.bundlerURL,
                startRoute: (_c = _this.props.options) === null || _c === void 0 ? void 0 : _c.startRoute,
                fileResolver: (_d = _this.props.options) === null || _d === void 0 ? void 0 : _d.fileResolver,
                skipEval: (_f = (_e = _this.props.options) === null || _e === void 0 ? void 0 : _e.skipEval) !== null && _f !== void 0 ? _f : false,
                logLevel: (_g = _this.props.options) === null || _g === void 0 ? void 0 : _g.logLevel,
                showOpenInCodeSandbox: !_this.openInCSBRegistered.current,
                showErrorScreen: !_this.errorScreenRegistered.current,
                showLoadingScreen: !_this.loadingScreenRegistered.current,
                reactDevTools: _this.state.reactDevTools,
                customNpmRegistries: (_j = (_h = _this.props.customSetup) === null || _h === void 0 ? void 0 : _h.npmRegistries) === null || _j === void 0 ? void 0 : _j.map(function (config) {
                    var _a;
                    return ((_a = __assign(__assign({}, config), { proxyEnabled: false })) !== null && _a !== void 0 ? _a : []);
                })
            });
            /**
             * Subscribe inside the context with the first client that gets instantiated.
             * This subscription is for global states like error and timeout, so no need for a per client listen
             * Also, set the timeout timer only when the first client is instantiated
             */
            if (typeof _this.unsubscribe !== "function") {
                _this.unsubscribe = client.listen(_this.handleMessage);
                _this.timeoutHook = setTimeout(function () {
                    _this.setState({ sandpackStatus: "timeout" });
                }, BUNDLER_TIMEOUT);
            }
            _this.unsubscribeClientListeners[clientId] =
                _this.unsubscribeClientListeners[clientId] || {};
            /**
             * Register any potential listeners that subscribed before sandpack ran
             */
            if (_this.queuedListeners[clientId]) {
                Object.keys(_this.queuedListeners[clientId]).forEach(function (listenerId) {
                    var listener = _this.queuedListeners[clientId][listenerId];
                    var unsubscribe = client.listen(listener);
                    _this.unsubscribeClientListeners[clientId][listenerId] = unsubscribe;
                });
                // Clear the queued listeners after they were registered
                _this.queuedListeners[clientId] = {};
            }
            /**
             * Register global listeners
             */
            var globalListeners = Object.entries(_this.queuedListeners.global);
            globalListeners.forEach(function (_a) {
                var listenerId = _a[0], listener = _a[1];
                var unsubscribe = client.listen(listener);
                _this.unsubscribeClientListeners[clientId][listenerId] = unsubscribe;
                /**
                 * Important: Do not clean the global queue
                 * Instead of cleaning the queue, keep it there for the
                 * following clients that might be created
                 */
            });
            return client;
        };
        _this.runSandpack = function () {
            Object.keys(_this.preregisteredIframes).forEach(function (clientId) {
                var iframe = _this.preregisteredIframes[clientId];
                _this.clients[clientId] = _this.createClient(iframe, clientId);
            });
            _this.setState({ sandpackStatus: "running" });
        };
        _this.registerBundler = function (iframe, clientId) {
            if (_this.state.sandpackStatus === "running") {
                _this.clients[clientId] = _this.createClient(iframe, clientId);
            }
            else {
                _this.preregisteredIframes[clientId] = iframe;
            }
        };
        _this.unregisterBundler = function (clientId) {
            var _a;
            var client = _this.clients[clientId];
            if (client) {
                client.cleanup();
                (_a = client.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.location.replace("about:blank");
                client.iframe.removeAttribute("src");
                delete _this.clients[clientId];
            }
            else {
                delete _this.preregisteredIframes[clientId];
            }
            if (_this.timeoutHook) {
                clearTimeout(_this.timeoutHook);
            }
            var unsubscribeQueuedClients = Object.values(_this.unsubscribeClientListeners);
            // Unsubscribing all listener registered
            unsubscribeQueuedClients.forEach(function (listenerOfClient) {
                var listenerFunctions = Object.values(listenerOfClient);
                listenerFunctions.forEach(function (unsubscribe) { return unsubscribe(); });
            });
            _this.setState({ sandpackStatus: "idle" });
        };
        _this.unregisterAllClients = function () {
            Object.keys(_this.clients).map(_this.unregisterBundler);
            if (typeof _this.unsubscribe === "function") {
                _this.unsubscribe();
                _this.unsubscribe = undefined;
            }
        };
        _this.setActiveFile = function (activeFile) {
            _this.setState({ activeFile: activeFile });
        };
        _this.openFile = function (path) {
            _this.setState(function (_a) {
                var visibleFiles = _a.visibleFiles;
                var newPaths = visibleFiles.includes(path)
                    ? visibleFiles
                    : __spreadArray(__spreadArray([], visibleFiles, true), [path], false);
                return {
                    activeFile: path,
                    visibleFiles: newPaths
                };
            });
        };
        _this.closeFile = function (path) {
            if (_this.state.visibleFiles.length === 1) {
                return;
            }
            _this.setState(function (_a) {
                var visibleFiles = _a.visibleFiles, activeFile = _a.activeFile;
                var indexOfRemovedPath = visibleFiles.indexOf(path);
                var newPaths = visibleFiles.filter(function (openPath) { return openPath !== path; });
                return {
                    activeFile: path === activeFile
                        ? indexOfRemovedPath === 0
                            ? visibleFiles[1]
                            : visibleFiles[indexOfRemovedPath - 1]
                        : activeFile,
                    visibleFiles: newPaths
                };
            });
        };
        _this.deleteFile = function (path) {
            _this.setState(function (_a) {
                var visibleFiles = _a.visibleFiles, files = _a.files, activeFile = _a.activeFile;
                var newFiles = __assign({}, files);
                delete newFiles[path];
                var remainingVisibleFiles = visibleFiles.filter(function (openPath) { return openPath !== path; });
                var deletedLastVisibleFile = remainingVisibleFiles.length === 0;
                if (deletedLastVisibleFile) {
                    var nextFile = Object.keys(files)[Object.keys(files).length - 1];
                    return {
                        visibleFiles: [nextFile],
                        activeFile: nextFile,
                        files: newFiles
                    };
                }
                return {
                    visibleFiles: remainingVisibleFiles,
                    activeFile: path === activeFile
                        ? remainingVisibleFiles[remainingVisibleFiles.length - 1]
                        : activeFile,
                    files: newFiles
                };
            }, _this.updateClients);
        };
        _this.addFile = _this.updateFile;
        _this.dispatchMessage = function (message, clientId) {
            if (_this.state.sandpackStatus !== "running") {
                console.warn("[sandpack-react]: dispatch cannot be called while in idle mode");
                return;
            }
            if (clientId) {
                _this.clients[clientId].dispatch(message);
            }
            else {
                Object.values(_this.clients).forEach(function (client) {
                    client.dispatch(message);
                });
            }
        };
        _this.addListener = function (listener, clientId) {
            if (clientId) {
                if (_this.clients[clientId]) {
                    var unsubscribeListener = _this.clients[clientId].listen(listener);
                    return unsubscribeListener;
                }
                else {
                    /**
                     * When listeners are added before the client is instantiated, they are stored with an unique id
                     * When the client is eventually instantiated, the listeners are registered on the spot
                     * Their unsubscribe functions are stored in unsubscribeClientListeners for future cleanup
                     */
                    var listenerId_1 = generateRandomId();
                    _this.queuedListeners[clientId] = _this.queuedListeners[clientId] || {};
                    _this.unsubscribeClientListeners[clientId] =
                        _this.unsubscribeClientListeners[clientId] || {};
                    _this.queuedListeners[clientId][listenerId_1] = listener;
                    var unsubscribeListener = function () {
                        if (_this.queuedListeners[clientId][listenerId_1]) {
                            /**
                             * Unsubscribe was called before the client was instantiated
                             * common example - a component with autorun=false that unmounted
                             */
                            delete _this.queuedListeners[clientId][listenerId_1];
                        }
                        else if (_this.unsubscribeClientListeners[clientId][listenerId_1]) {
                            /**
                             * unsubscribe was called for a listener that got added before the client was instantiated
                             * call the unsubscribe function and remove it from memory
                             */
                            _this.unsubscribeClientListeners[clientId][listenerId_1]();
                            delete _this.unsubscribeClientListeners[clientId][listenerId_1];
                        }
                    };
                    return unsubscribeListener;
                }
            }
            else {
                // Push to the **global** queue
                var listenerId = generateRandomId();
                _this.queuedListeners.global[listenerId] = listener;
                // Add to the current clients
                var clients = Object.values(_this.clients);
                var currentClientUnsubscribeListeners_1 = clients.map(function (client) {
                    return client.listen(listener);
                });
                var unsubscribeListener = function () {
                    // Unsubscribing from the clients already created
                    currentClientUnsubscribeListeners_1.forEach(function (unsubscribe) {
                        return unsubscribe();
                    });
                };
                return unsubscribeListener;
            }
        };
        _this.resetFile = function (path) {
            var files = getSandpackStateFromProps({
                template: _this.props.template,
                files: _this.props.files,
                customSetup: _this.props.customSetup,
                options: _this.props.options
            }).files;
            _this.setState(function (prevState) {
                var _a;
                return ({
                    files: __assign(__assign({}, prevState.files), (_a = {}, _a[path] = files[path], _a))
                });
            }, _this.updateClients);
        };
        _this.resetAllFiles = function () {
            var files = getSandpackStateFromProps({
                template: _this.props.template,
                files: _this.props.files,
                customSetup: _this.props.customSetup,
                options: _this.props.options
            }).files;
            _this.setState({ files: files }, _this.updateClients);
        };
        _this._getSandpackState = function () {
            var _a = _this.state, files = _a.files, activeFile = _a.activeFile, visibleFiles = _a.visibleFiles, visibleFilesFromProps = _a.visibleFilesFromProps, startRoute = _a.startRoute, bundlerState = _a.bundlerState, editorState = _a.editorState, error = _a.error, sandpackStatus = _a.sandpackStatus, environment = _a.environment, initMode = _a.initMode;
            return {
                files: files,
                environment: environment,
                visibleFiles: visibleFiles,
                visibleFilesFromProps: visibleFilesFromProps,
                activeFile: activeFile,
                startRoute: startRoute,
                error: error,
                bundlerState: bundlerState,
                status: sandpackStatus,
                editorState: editorState,
                initMode: initMode,
                clients: _this.clients,
                dispatch: _this.dispatchMessage,
                errorScreenRegisteredRef: _this.errorScreenRegistered,
                lazyAnchorRef: _this.lazyAnchorRef,
                listen: _this.addListener,
                loadingScreenRegisteredRef: _this.loadingScreenRegistered,
                openInCSBRegisteredRef: _this.openInCSBRegistered,
                registerBundler: _this.registerBundler,
                runSandpack: _this.runSandpack,
                unregisterBundler: _this.unregisterBundler,
                registerReactDevTools: _this.registerReactDevTools,
                /**
                 * File operations
                 */
                openFile: _this.openFile,
                resetFile: _this.resetFile,
                resetAllFiles: _this.resetAllFiles,
                setActiveFile: _this.setActiveFile,
                updateCurrentFile: _this.updateCurrentFile,
                updateFile: _this.updateFile,
                addFile: _this.addFile,
                closeFile: _this.closeFile,
                deleteFile: _this.deleteFile
            };
        };
        var _e = getSandpackStateFromProps({
            template: props.template,
            files: props.files,
            customSetup: props.customSetup,
            options: props.options
        }), activeFile = _e.activeFile, visibleFiles = _e.visibleFiles, files = _e.files, environment = _e.environment;
        _this.state = {
            files: files,
            environment: environment,
            visibleFiles: visibleFiles,
            visibleFilesFromProps: visibleFiles,
            activeFile: activeFile,
            startRoute: (_a = _this.props.options) === null || _a === void 0 ? void 0 : _a.startRoute,
            bundlerState: undefined,
            error: null,
            sandpackStatus: ((_c = (_b = _this.props.options) === null || _b === void 0 ? void 0 : _b.autorun) !== null && _c !== void 0 ? _c : true) ? "initial" : "idle",
            editorState: "pristine",
            initMode: ((_d = _this.props.options) === null || _d === void 0 ? void 0 : _d.initMode) || "lazy",
            reactDevTools: undefined
        };
        /**
         * List of functions to be registered in the client, once it has been created
         *
         * Use cases:
         * - Set a listener, but the client hasn't been created yet;
         * - Set a listener, but the client has already been created;
         * - A client already exists, set a new listener and then one more client has been created;
         */
        _this.queuedListeners = { global: {} };
        /**
         * Global list of unsubscribe function for the listeners
         */
        _this.unsubscribeClientListeners = {};
        _this.preregisteredIframes = {};
        _this.clients = {};
        _this.lazyAnchorRef = React__namespace.createRef();
        _this.errorScreenRegistered =
            React__namespace.createRef();
        _this.openInCSBRegistered =
            React__namespace.createRef();
        _this.loadingScreenRegistered =
            React__namespace.createRef();
        return _this;
    }
    SandpackProviderClass.prototype.initializeSandpackIframe = function () {
        var _this = this;
        var _a, _b, _c, _d, _e;
        var autorun = (_b = (_a = this.props.options) === null || _a === void 0 ? void 0 : _a.autorun) !== null && _b !== void 0 ? _b : true;
        if (!autorun) {
            return;
        }
        var observerOptions = (_d = (_c = this.props.options) === null || _c === void 0 ? void 0 : _c.initModeObserverOptions) !== null && _d !== void 0 ? _d : {
            rootMargin: "1000px 0px"
        };
        if (this.intersectionObserver && this.lazyAnchorRef.current) {
            (_e = this.intersectionObserver) === null || _e === void 0 ? void 0 : _e.unobserve(this.lazyAnchorRef.current);
        }
        if (this.lazyAnchorRef.current && this.state.initMode === "lazy") {
            // If any component registerd a lazy anchor ref component, use that for the intersection observer
            this.intersectionObserver = new IntersectionObserver(function (entries) {
                var _a;
                if (entries.some(function (entry) { return entry.isIntersecting; })) {
                    // Delay a cycle so all hooks register the refs for the sub-components (open in csb, loading, error overlay)
                    _this.initializeSandpackIframeHook = setTimeout(function () {
                        _this.runSandpack();
                    }, 50);
                    if (_this.lazyAnchorRef.current) {
                        (_a = _this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.unobserve(_this.lazyAnchorRef.current);
                    }
                }
            }, observerOptions);
            this.intersectionObserver.observe(this.lazyAnchorRef.current);
        }
        else if (this.lazyAnchorRef.current &&
            this.state.initMode === "user-visible") {
            this.intersectionObserver = new IntersectionObserver(function (entries) {
                if (entries.some(function (entry) { return entry.isIntersecting; })) {
                    // Delay a cycle so all hooks register the refs for the sub-components (open in csb, loading, error overlay)
                    _this.initializeSandpackIframeHook = setTimeout(function () {
                        _this.runSandpack();
                    }, 50);
                }
                else {
                    if (_this.initializeSandpackIframeHook) {
                        clearTimeout(_this.initializeSandpackIframeHook);
                    }
                    Object.keys(_this.clients).map(_this.unregisterBundler);
                    _this.unregisterAllClients();
                }
            }, observerOptions);
            this.intersectionObserver.observe(this.lazyAnchorRef.current);
        }
        else {
            // else run the sandpack on mount, with a slight delay to allow all subcomponents to mount/register components
            this.initializeSandpackIframeHook = setTimeout(function () { return _this.runSandpack(); }, 50);
        }
    };
    SandpackProviderClass.prototype.componentDidMount = function () {
        this.initializeSandpackIframe();
    };
    SandpackProviderClass.prototype.componentDidUpdate = function (prevProps) {
        var _a, _b, _c, _d;
        /**
         * Watch the changes on the initMode prop
         */
        if (((_a = prevProps.options) === null || _a === void 0 ? void 0 : _a.initMode) !== ((_b = this.props.options) === null || _b === void 0 ? void 0 : _b.initMode) &&
            ((_c = this.props.options) === null || _c === void 0 ? void 0 : _c.initMode)) {
            this.setState({ initMode: (_d = this.props.options) === null || _d === void 0 ? void 0 : _d.initMode }, this.initializeSandpackIframe);
        }
        /**
         * Custom setup derived from props
         */
        var _e = getSandpackStateFromProps({
            template: this.props.template,
            files: this.props.files,
            customSetup: this.props.customSetup,
            options: this.props.options
        }), activeFile = _e.activeFile, visibleFiles = _e.visibleFiles, files = _e.files, environment = _e.environment;
        /**
         * What the changes on the customSetup props
         */
        if (prevProps.template !== this.props.template ||
            !isEqual__default.default(prevProps.options, this.props.options) ||
            !isEqual__default.default(prevProps.customSetup, this.props.customSetup) ||
            !isEqual__default.default(prevProps.files, this.props.files)) {
            /* eslint-disable react/no-did-update-set-state */
            this.setState({
                activeFile: activeFile,
                visibleFiles: visibleFiles,
                visibleFilesFromProps: visibleFiles,
                files: files,
                environment: environment
            });
            if (this.state.sandpackStatus !== "running") {
                return;
            }
            Object.values(this.clients).forEach(function (client) {
                return client.updatePreview({
                    files: files,
                    template: environment
                });
            });
        }
        /**
         * Watch the changes on editorState
         */
        var editorState = isEqual__default.default(files, this.state.files) ? "pristine" : "dirty";
        if (editorState !== this.state.editorState) {
            this.setState({ editorState: editorState });
        }
    };
    SandpackProviderClass.prototype.componentWillUnmount = function () {
        if (typeof this.unsubscribe === "function") {
            this.unsubscribe();
        }
        if (this.timeoutHook) {
            clearTimeout(this.timeoutHook);
        }
        if (this.debounceHook) {
            clearTimeout(this.debounceHook);
        }
        if (this.initializeSandpackIframeHook) {
            clearTimeout(this.initializeSandpackIframeHook);
        }
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
    };
    SandpackProviderClass.prototype.render = function () {
        var _a;
        var _b = this.props, children = _b.children, theme = _b.theme, className = _b.className, style = _b.style;
        return (React__namespace.createElement(Sandpack$1.Provider, { value: this._getSandpackState() },
            React__namespace.createElement(classer.ClasserProvider, { classes: (_a = this.props.options) === null || _a === void 0 ? void 0 : _a.classes },
                React__namespace.createElement(SandpackThemeProvider, { className: className, style: style, theme: theme }, children))));
    };
    return SandpackProviderClass;
}(React__namespace.PureComponent));
/**
 * @hidden
 */
var SandpackProvider = 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
SandpackProviderClass;
/**
 * @category Provider
 */
var SandpackConsumer = Sandpack$1.Consumer;

/**
 * @category Hooks
 */
function useSandpack() {
    var sandpack = React__namespace.useContext(Sandpack$1);
    if (sandpack === null) {
        throw new Error("[sandpack-react]: \"useSandpack\" must be wrapped by a \"SandpackProvider\"");
    }
    var dispatch = sandpack.dispatch, listen = sandpack.listen, rest = __rest(sandpack, ["dispatch", "listen"]);
    return {
        sandpack: __assign({}, rest),
        dispatch: dispatch,
        listen: listen
    };
}

/**
 * This returns the current state of the active file
 * and a method to update its content.
 *
 * @category Hooks
 */
var useActiveCode = function () {
    var _a, _b, _c;
    var sandpack = useSandpack().sandpack;
    return {
        code: (_a = sandpack.files[sandpack.activeFile]) === null || _a === void 0 ? void 0 : _a.code,
        readOnly: (_c = (_b = sandpack.files[sandpack.activeFile]) === null || _b === void 0 ? void 0 : _b.readOnly) !== null && _c !== void 0 ? _c : false,
        updateCode: sandpack.updateCurrentFile
    };
};

var _a$6;
var iconStandaloneClassName = css({
    svg: { margin: "auto" }
});
var buttonClassName = css((_a$6 = {
        appearance: "none",
        border: "0",
        outline: "none",
        display: "flex",
        alignItems: "center",
        fontSize: "inherit",
        fontFamily: "inherit",
        backgroundColor: "transparent",
        transition: "color $default, background $default",
        cursor: "pointer",
        color: "$colors$clickable",
        "&:disabled": { color: "$colors$disabled" },
        "&:hover:not(:disabled,[data-active='true'])": { color: "$colors$hover" },
        '&[data-active="true"]': { color: "$colors$accent" },
        svg: {
            minWidth: "$space$4",
            width: "$space$4",
            height: "$space$4"
        }
    },
    _a$6["&." + iconStandaloneClassName] = {
        padding: "$space$1",
        width: "$space$7",
        height: "$space$7",
        display: "flex"
    },
    _a$6));
var roundedButtonClassName = css({
    backgroundColor: "$colors$surface2",
    borderRadius: "99999px",
    '&[data-active="true"]': {
        color: "$colors$surface1",
        background: "$colors$accent"
    },
    "&:hover:not(:disabled,[data-active='true'])": {
        backgroundColor: "$colors$surface3"
    }
});
var iconClassName = css({ padding: 0 });
var fadeIn = keyframes({
    "0%": {
        opacity: 0,
        transform: "translateY(4px)"
    },
    "100%": {
        opacity: 1,
        transform: "translateY(0)"
    }
});
var absoluteClassName = css({
    position: "absolute",
    bottom: "0",
    left: "0",
    right: "0",
    top: "0",
    margin: "0",
    overflow: "auto",
    height: "100%",
    zIndex: "$top"
});
var errorClassName = css({
    padding: "$space$4",
    whiteSpace: "pre-wrap",
    fontFamily: "$font$mono",
    backgroundColor: "$colors$errorSurface"
});
var errorMessageClassName = css({
    animation: fadeIn + " 150ms ease",
    color: "$colors$error"
});

var _a$5;
var tabsClassName = css({
    borderBottom: "1px solid $colors$surface2",
    background: "$colors$surface1"
});
var tabsScrollableClassName = css({
    padding: "0 $space$2",
    overflow: "auto",
    display: "flex",
    flexWrap: "nowrap",
    alignItems: "stretch",
    minHeight: "40px",
    marginBottom: "-1px"
});
var closeButtonClassName = css({
    padding: "0 $space$1 0 $space$1",
    borderRadius: "$border$radius",
    marginLeft: "$space$1",
    width: "$space$5",
    visibility: "hidden",
    svg: {
        width: "$space$3",
        height: "$space$3",
        display: "block",
        position: "relative",
        top: 1
    }
});
/**
 * @hidden
 */
var tabButton = css((_a$5 = {
        padding: "0 $space$2",
        height: "$layout$headerHeight",
        whiteSpace: "nowrap",
        "&:focus": { outline: "none" }
    },
    _a$5["&:hover > ." + closeButtonClassName] = { visibility: "unset" },
    _a$5));
/**
 * FileTabs is a list of all open files, the active file, and its state.
 *
 * @category Components
 */
var FileTabs = function (_a) {
    var closableTabs = _a.closableTabs, className = _a.className, props = __rest(_a, ["closableTabs", "className"]);
    var sandpack = useSandpack().sandpack;
    var c = classer.useClasser(THEME_PREFIX);
    var activeFile = sandpack.activeFile, visibleFiles = sandpack.visibleFiles, setActiveFile = sandpack.setActiveFile;
    var handleCloseFile = function (ev) {
        ev.stopPropagation();
        var tabElm = ev.target.closest("[data-active]");
        var pathToClose = tabElm === null || tabElm === void 0 ? void 0 : tabElm.getAttribute("title");
        if (!pathToClose) {
            return;
        }
        sandpack.closeFile(pathToClose);
    };
    var getTriggerText = function (currentPath) {
        var documentFileName = getFileName(currentPath);
        var pathsWithDuplicateFileNames = visibleFiles.reduce(function (prev, curr) {
            if (curr === currentPath) {
                return prev;
            }
            var fileName = getFileName(curr);
            if (fileName === documentFileName) {
                prev.push(curr);
                return prev;
            }
            return prev;
        }, []);
        if (pathsWithDuplicateFileNames.length === 0) {
            return documentFileName;
        }
        else {
            return calculateNearestUniquePath(currentPath, pathsWithDuplicateFileNames);
        }
    };
    return (React__namespace.createElement("div", __assign({ className: classNames(c("tabs"), tabsClassName, className), translate: "no" }, props),
        React__namespace.createElement("div", { "aria-label": "Select active file", className: classNames(c("tabs-scrollable-container"), tabsScrollableClassName), role: "tablist" }, visibleFiles.map(function (filePath) { return (React__namespace.createElement("button", { key: filePath, "aria-selected": filePath === activeFile, className: classNames(c("tab-button"), buttonClassName, tabButton), "data-active": filePath === activeFile, onClick: function () { return setActiveFile(filePath); }, role: "tab", title: filePath, type: "button" },
            getTriggerText(filePath),
            closableTabs && visibleFiles.length > 1 && (React__namespace.createElement("span", { className: classNames(c("close-button"), closeButtonClassName), onClick: handleCloseFile },
                React__namespace.createElement(CloseIcon, null))))); }))));
};

var runButtonClassName = css({
    position: "absolute",
    bottom: "$space$2",
    right: "$space$2",
    paddingRight: "$space$3"
});
/**
 * @category Components
 */
var RunButton$1 = function (_a) {
    var className = _a.className, onClick = _a.onClick, props = __rest(_a, ["className", "onClick"]);
    var c = classer.useClasser(THEME_PREFIX);
    var sandpack = useSandpack().sandpack;
    return (React__namespace.createElement("button", __assign({ className: classNames(c("button"), buttonClassName, roundedButtonClassName, runButtonClassName, className), onClick: function (event) {
            sandpack.runSandpack();
            onClick === null || onClick === void 0 ? void 0 : onClick(event);
        }, type: "button" }, props),
        React__namespace.createElement(RunIcon, null),
        "Run"));
};

var _a$4;
/**
 * @hidden
 */
var stackClassName = css((_a$4 = {
        display: "flex",
        flexDirection: "column",
        width: "100%",
        position: "relative",
        backgroundColor: "$colors$surface1",
        gap: 1
    },
    _a$4["&:has(." + THEME_PREFIX + "-stack)"] = {
        backgroundColor: "$colors$surface2"
    },
    _a$4));
/**
 * @category Components
 */
var SandpackStack = function (_a) {
    var className = _a.className, props = __rest(_a, ["className"]);
    var c = classer.useClasser(THEME_PREFIX);
    return (React__namespace.createElement("div", __assign({ className: classNames(c("stack"), stackClassName, className) }, props)));
};

/**
 * @category Hooks
 */
var useSandpackTheme = function () {
    var _a = React__namespace.useContext(SandpackThemeContext), theme = _a.theme, id = _a.id, mode = _a.mode;
    return { theme: theme, themeId: id, themeMode: mode };
};

/* eslint-disable @typescript-eslint/no-explicit-any */
var shallowEqual = function (a, b) {
    if (a.length !== b.length)
        return false;
    var result = true;
    for (var index = 0; index < a.length; index++) {
        if (a[index] !== b[index]) {
            result = false;
            break;
        }
    }
    return result;
};

var getCodeMirrorPosition = function (doc, _a) {
    var line = _a.line, column = _a.column;
    return doc.line(line).from + (column !== null && column !== void 0 ? column : 0) - 1;
};
var getEditorTheme = function () {
    return view.EditorView.theme({
        "&": {
            backgroundColor: "var(--" + THEME_PREFIX + "-colors-surface1)",
            color: "var(--" + THEME_PREFIX + "-syntax-color-plain)",
            height: "100%"
        },
        ".cm-matchingBracket, .cm-nonmatchingBracket, &.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
            color: "inherit",
            backgroundColor: "rgba(128,128,128,.25)",
            backgroundBlendMode: "difference"
        },
        "&.cm-editor.cm-focused": {
            outline: "none"
        },
        ".cm-activeLine": {
            backgroundColor: "var(--" + THEME_PREFIX + "-colors-surface3)",
            borderRadius: "var(--" + THEME_PREFIX + "-border-radius)"
        },
        ".cm-errorLine": {
            backgroundColor: "var(--" + THEME_PREFIX + "-colors-errorSurface)",
            borderRadius: "var(--" + THEME_PREFIX + "-border-radius)"
        },
        ".cm-content": {
            caretColor: "var(--" + THEME_PREFIX + "-colors-accent)",
            padding: "0 var(--" + THEME_PREFIX + "-space-4)"
        },
        ".cm-scroller": {
            fontFamily: "var(--" + THEME_PREFIX + "-font-mono)",
            lineHeight: "var(--" + THEME_PREFIX + "-font-lineHeight)"
        },
        ".cm-gutters": {
            backgroundColor: "var(--" + THEME_PREFIX + "-colors-surface1)",
            color: "var(--" + THEME_PREFIX + "-colors-disabled)",
            border: "none",
            paddingLeft: "var(--" + THEME_PREFIX + "-space-1)"
        },
        ".cm-gutter.cm-lineNumbers": {
            fontSize: ".6em"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            lineHeight: "var(--" + THEME_PREFIX + "-font-lineHeight)",
            minWidth: "var(--" + THEME_PREFIX + "-space-5)"
        },
        ".cm-content .cm-line": { paddingLeft: "var(--" + THEME_PREFIX + "-space-1)" },
        ".cm-content.cm-readonly .cm-line": { paddingLeft: 0 }
    });
};
var classNameToken = function (name) {
    return THEME_PREFIX + "-syntax-" + name;
};
var styleTokens = function () {
    var syntaxHighLightTokens = [
        "string",
        "plain",
        "comment",
        "keyword",
        "definition",
        "punctuation",
        "property",
        "tag",
        "static",
    ];
    return syntaxHighLightTokens.reduce(function (acc, token) {
        var _a;
        return __assign(__assign({}, acc), (_a = {}, _a["." + classNameToken(token)] = {
            color: "$syntax$color$" + token,
            fontStyle: "$syntax$fontStyle$" + token
        }, _a));
    }, {});
};
var getSyntaxHighlight = function (theme) {
    return language.HighlightStyle.define([
        { tag: highlight.tags.link, textDecoration: "underline" },
        { tag: highlight.tags.emphasis, fontStyle: "italic" },
        { tag: highlight.tags.strong, fontWeight: "bold" },
        {
            tag: highlight.tags.keyword,
            "class": classNameToken("keyword")
        },
        {
            tag: [highlight.tags.atom, highlight.tags.number, highlight.tags.bool],
            "class": classNameToken("static")
        },
        {
            tag: highlight.tags.variableName,
            "class": classNameToken("plain")
        },
        {
            // Standard tags, e.g <h1 />
            tag: highlight.tags.standard(highlight.tags.tagName),
            "class": classNameToken("tag")
        },
        {
            tag: [
                // Highlight function call
                highlight.tags["function"](highlight.tags.variableName),
                // Highlight function definition differently (eg: functional component def in React)
                highlight.tags.definition(highlight.tags["function"](highlight.tags.variableName)),
                // "Custom tags", meaning React component
                highlight.tags.tagName,
            ],
            "class": classNameToken("definition")
        },
        {
            tag: highlight.tags.propertyName,
            "class": classNameToken("property")
        },
        {
            tag: [highlight.tags.literal, highlight.tags.inserted],
            "class": classNameToken(theme.syntax.string ? "string" : "static")
        },
        {
            tag: highlight.tags.punctuation,
            "class": classNameToken("punctuation")
        },
        {
            tag: [highlight.tags.comment, highlight.tags.quote],
            "class": classNameToken("comment")
        },
    ]);
};
var getLanguageFromFile = function (filePath, fileType, additionalLanguages) {
    if (!filePath && !fileType)
        return "javascript";
    var extension = fileType;
    if (!extension && filePath) {
        var extensionDotIndex = filePath.lastIndexOf(".");
        extension = filePath.slice(extensionDotIndex + 1);
    }
    for (var _i = 0, additionalLanguages_1 = additionalLanguages; _i < additionalLanguages_1.length; _i++) {
        var additionalLanguage = additionalLanguages_1[_i];
        if (extension === additionalLanguage.name ||
            additionalLanguage.extensions.includes(extension || "")) {
            return additionalLanguage.name;
        }
    }
    switch (extension) {
        case "ts":
        case "tsx":
            return "typescript";
        case "html":
        case "svelte":
        case "vue":
            return "html";
        case "css":
        case "less":
        case "scss":
            return "css";
        case "js":
        case "jsx":
        case "json":
        default:
            return "javascript";
    }
};
var getCodeMirrorLanguage = function (extension, additionalLanguages) {
    var options = {
        javascript: langJavascript.javascript({ jsx: true, typescript: false }),
        typescript: langJavascript.javascript({ jsx: true, typescript: true }),
        html: langHtml.html(),
        css: langCss.css()
    };
    for (var _i = 0, additionalLanguages_2 = additionalLanguages; _i < additionalLanguages_2.length; _i++) {
        var additionalLanguage = additionalLanguages_2[_i];
        if (extension === additionalLanguage.name) {
            return additionalLanguage.language;
        }
    }
    return options[extension];
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var useCombinedRefs = function () {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        refs[_i] = arguments[_i];
    }
    return React__namespace.useCallback(function (element) {
        return refs.forEach(function (ref) {
            if (!ref) {
                return;
            }
            // Ref can have two types - a function or an object. We treat each case.
            if (typeof ref === "function") {
                return ref(element);
            }
            // As per https://github.com/facebook/react/issues/13029
            // it should be fine to set current this way.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            ref.current = element;
        });
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs);
};

function highlightDecorators(positions) {
    return view.ViewPlugin.fromClass(/** @class */ (function () {
        function class_1(view) {
            this.decorations = this.getDecoration(view);
        }
        class_1.prototype.update = function (update) {
            return;
        };
        class_1.prototype.getDecoration = function (view$1) {
            if (!positions)
                return view.Decoration.none;
            var rangesDecorators = positions.map(function (item) {
                var _a, _b, _c;
                var lineDeco = view.Decoration.line({
                    attributes: { "class": (_a = item.className) !== null && _a !== void 0 ? _a : "" }
                });
                var markDeco = view.Decoration.mark({
                    "class": (_b = item.className) !== null && _b !== void 0 ? _b : "",
                    attributes: (_c = item.elementAttributes) !== null && _c !== void 0 ? _c : undefined
                });
                var positionLineStart = getCodeMirrorPosition(view$1.state.doc, {
                    line: item.line,
                    column: item.startColumn
                }) + 1;
                if (item.startColumn && item.endColumn) {
                    var positionLineEnd = getCodeMirrorPosition(view$1.state.doc, {
                        line: item.line,
                        column: item.endColumn
                    }) + 1;
                    return markDeco.range(positionLineStart, positionLineEnd);
                }
                return lineDeco.range(positionLineStart);
            });
            return view.Decoration.set(rangesDecorators);
        };
        return class_1;
    }()), {
        decorations: function (v) { return v.decorations; }
    });
}

function highlightInlineError() {
    return activeLineHighlighter;
}
var lineDeco = view.Decoration.line({ attributes: { "class": "cm-errorLine" } });
var activeLineHighlighter = view.ViewPlugin.fromClass(/** @class */ (function () {
    function class_1() {
        this.decorations = view.Decoration.none;
    }
    class_1.prototype.update = function (update) {
        var _this = this;
        update.transactions.forEach(function (trans) {
            // @ts-ignore
            var errorValue = trans.annotation("show-error");
            if (errorValue !== undefined) {
                var position = getCodeMirrorPosition(update.view.state.doc, {
                    line: errorValue
                }) + 1;
                _this.decorations = view.Decoration.set([lineDeco.range(position)]);
                // @ts-ignore
            }
            else if (trans.annotation("remove-errors")) {
                _this.decorations = view.Decoration.none;
            }
        });
    };
    return class_1;
}()), {
    decorations: function (v) { return v.decorations; }
});

var _a$3, _b$1;
var placeholderClassName = css({
    margin: "0",
    display: "block",
    fontFamily: "$font$mono",
    fontSize: "$font$size",
    color: "$syntax$color$plain",
    lineHeight: "$font$lineHeight"
});
var tokensClassName = css(styleTokens());
var editorClassName = css((_a$3 = {
        flex: 1,
        position: "relative",
        overflow: "auto",
        background: "$colors$surface1",
        ".cm-scroller": {
            padding: "$space$4 0"
        }
    },
    _a$3["." + placeholderClassName] = {
        padding: "$space$4 0"
    },
    _a$3));
var cmClassName = css({
    margin: "0",
    outline: "none",
    height: "100%"
});
var readOnlyClassName = css((_b$1 = {
        fontFamily: "$font$mono",
        fontSize: "0.8em",
        position: "absolute",
        right: "$space$2",
        bottom: "$space$2",
        zIndex: "$top",
        color: "$colors$clickable",
        backgroundColor: "$colors$surface2",
        borderRadius: "99999px",
        padding: "calc($space$1 / 2) $space$2"
    },
    _b$1["& + ." + buttonClassName] = {
        right: "calc($space$11 * 2)"
    },
    _b$1));

var useSyntaxHighlight = function (_a) {
    var langSupport = _a.langSupport, highlightTheme = _a.highlightTheme, _b = _a.code, code = _b === void 0 ? "" : _b;
    var tree = langSupport.language.parser.parse(code);
    var offSet = 0;
    var codeElementsRender = [];
    var addElement = function (to, className) {
        if (to > offSet) {
            var children = code.slice(offSet, to);
            codeElementsRender.push(className
                ? React.createElement("span", {
                    children: children,
                    className: className,
                    key: "" + to + offSet
                })
                : children);
            offSet = to;
        }
    };
    highlight.highlightTree(tree, highlightTheme, function (from, to, className) {
        addElement(from, "");
        addElement(to, className);
    });
    /**
     * The language parse doesn't look consistent.
     * The final syntax highlight used by CodeMirror
     * includes an end empty line, and the parse here doesn't,
     * so let's add it manually.
     */
    if (offSet < code.length) {
        codeElementsRender.push("\n\n");
    }
    return codeElementsRender;
};

/**
 * @category Components
 */
var CodeMirror = React__namespace.forwardRef(function (_a, ref) {
    var _b = _a.code, code = _b === void 0 ? "" : _b, filePath = _a.filePath, fileType = _a.fileType, onCodeUpdate = _a.onCodeUpdate, _c = _a.showLineNumbers, showLineNumbers = _c === void 0 ? false : _c, _d = _a.showInlineErrors, showInlineErrors = _d === void 0 ? false : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.editorState, editorState = _f === void 0 ? "pristine" : _f, _g = _a.readOnly, readOnly = _g === void 0 ? false : _g, _h = _a.showReadOnly, showReadOnly = _h === void 0 ? true : _h, decorators = _a.decorators, _j = _a.initMode, initMode = _j === void 0 ? "lazy" : _j; _a.id; var _k = _a.extensions, extensions = _k === void 0 ? [] : _k, _l = _a.extensionsKeymap, extensionsKeymap = _l === void 0 ? [] : _l, _m = _a.additionalLanguages, additionalLanguages = _m === void 0 ? [] : _m;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var wrapper = React__namespace.useRef(null);
    var combinedRef = useCombinedRefs(wrapper, ref);
    var cmView = React__namespace.useRef();
    var _o = useSandpackTheme(), theme = _o.theme, themeId = _o.themeId;
    var _p = React__namespace.useState(code), internalCode = _p[0], setInternalCode = _p[1];
    var _q = React__namespace.useState(initMode === "immediate"), shouldInitEditor = _q[0], setShouldInitEditor = _q[1];
    var c = classer.useClasser(THEME_PREFIX);
    var listen = useSandpack().listen;
    var prevExtension = React__namespace.useRef([]);
    var prevExtensionKeymap = React__namespace.useRef([]);
    var isIntersecting = useIntersectionObserver__default.default(wrapper, {
        rootMargin: "600px 0px",
        threshold: 0.2
    }).isIntersecting;
    React__namespace.useImperativeHandle(ref, function () { return ({
        getCodemirror: function () { return cmView.current; }
    }); });
    React__namespace.useEffect(function () {
        var mode = initMode === "lazy" || initMode === "user-visible";
        if (mode && isIntersecting) {
            setShouldInitEditor(true);
        }
    }, [initMode, isIntersecting]);
    var languageExtension = getLanguageFromFile(filePath, fileType, additionalLanguages);
    var langSupport = getCodeMirrorLanguage(languageExtension, additionalLanguages);
    var highlightTheme = getSyntaxHighlight(theme);
    var syntaxHighlightRender = useSyntaxHighlight({
        langSupport: langSupport,
        highlightTheme: highlightTheme,
        code: code
    });
    // decorators need to be sorted by `line`, otherwise it will throw error
    // see https://github.com/codesandbox/sandpack/issues/383
    var sortedDecorators = React__namespace.useMemo(function () {
        return decorators
            ? decorators.sort(function (d1, d2) { return d1.line - d2.line; })
            : decorators;
    }, [decorators]);
    React__namespace.useEffect(function () {
        if (!wrapper.current || !shouldInitEditor)
            return;
        /**
         * TODO: replace this time out to something more efficient
         * waiting for "postTask scheduler" API be ready
         */
        var timer = setTimeout(function delayCodeEditorInit() {
            var customCommandsKeymap = [
                {
                    key: "Tab",
                    run: function (view) {
                        var _a, _b;
                        commands.indentMore(view);
                        var customKey = extensionsKeymap.find(function (_a) {
                            var key = _a.key;
                            return key === "Tab";
                        });
                        return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;
                    }
                },
                {
                    key: "Shift-Tab",
                    run: function (_a) {
                        var _b, _c;
                        var state = _a.state, dispatch = _a.dispatch;
                        commands.indentLess({ state: state, dispatch: dispatch });
                        var customKey = extensionsKeymap.find(function (_a) {
                            var key = _a.key;
                            return key === "Shift-Tab";
                        });
                        return (_c = (_b = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _b === void 0 ? void 0 : _b.call(customKey, view$1)) !== null && _c !== void 0 ? _c : true;
                    }
                },
                {
                    key: "Escape",
                    run: function () {
                        if (readOnly)
                            return true;
                        if (wrapper.current) {
                            wrapper.current.focus();
                        }
                        return true;
                    }
                },
                {
                    key: "mod-Backspace",
                    run: commands.deleteGroupBackward
                },
            ];
            var extensionList = __spreadArray(__spreadArray([
                view.highlightSpecialChars(),
                commands.history(),
                autocomplete.closeBrackets()
            ], extensions, true), [
                view.keymap.of(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], autocomplete.closeBracketsKeymap, true), commands.defaultKeymap, true), commands.historyKeymap, true), customCommandsKeymap, true), extensionsKeymap, true)),
                langSupport,
                getEditorTheme(),
                language.syntaxHighlighting(highlightTheme),
            ], false);
            if (readOnly) {
                extensionList.push(state.EditorState.readOnly.of(true));
                extensionList.push(view.EditorView.editable.of(false));
            }
            else {
                extensionList.push(language.bracketMatching());
                extensionList.push(view.highlightActiveLine());
            }
            if (sortedDecorators) {
                extensionList.push(highlightDecorators(sortedDecorators));
            }
            if (wrapContent) {
                extensionList.push(view.EditorView.lineWrapping);
            }
            if (showLineNumbers) {
                extensionList.push(view.lineNumbers());
            }
            if (showInlineErrors) {
                extensionList.push(highlightInlineError());
            }
            var parentDiv = wrapper.current;
            var existingPlaceholder = parentDiv.querySelector(".sp-pre-placeholder");
            if (existingPlaceholder) {
                parentDiv.removeChild(existingPlaceholder);
            }
            var view$1 = new view.EditorView({
                doc: code,
                extensions: extensionList,
                parent: parentDiv,
                dispatch: function (tr) {
                    view$1.update([tr]);
                    if (tr.docChanged) {
                        var newCode = tr.newDoc.sliceString(0, tr.newDoc.length);
                        setInternalCode(newCode);
                        onCodeUpdate === null || onCodeUpdate === void 0 ? void 0 : onCodeUpdate(newCode);
                    }
                }
            });
            view$1.contentDOM.setAttribute("data-gramm", "false");
            view$1.contentDOM.setAttribute("aria-label", filePath ? "Code Editor for " + getFileName(filePath) : "Code Editor");
            if (readOnly) {
                view$1.contentDOM.classList.add("cm-readonly");
            }
            else {
                view$1.contentDOM.setAttribute("tabIndex", "-1");
            }
            cmView.current = view$1;
        }, 0);
        return function () {
            var _a;
            (_a = cmView.current) === null || _a === void 0 ? void 0 : _a.destroy();
            clearTimeout(timer);
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        shouldInitEditor,
        showLineNumbers,
        wrapContent,
        themeId,
        sortedDecorators,
        readOnly,
    ]);
    React__namespace.useEffect(function applyExtensions() {
        var view$1 = cmView.current;
        var dependenciesAreDiff = !shallowEqual(extensions, prevExtension.current) ||
            !shallowEqual(extensionsKeymap, prevExtensionKeymap.current);
        if (view$1 && dependenciesAreDiff) {
            view$1.dispatch({
                effects: state.StateEffect.appendConfig.of(extensions)
            });
            view$1.dispatch({
                effects: state.StateEffect.appendConfig.of(view.keymap.of(__spreadArray([], extensionsKeymap, true)))
            });
            prevExtension.current = extensions;
            prevExtensionKeymap.current = extensionsKeymap;
        }
    }, [extensions, extensionsKeymap]);
    React__namespace.useEffect(function () {
        // When the user clicks on a tab button on a larger screen
        // Avoid autofocus on mobile as it leads to a bad experience and an unexpected layout shift
        if (cmView.current &&
            editorState === "dirty" &&
            window.matchMedia("(min-width: 768px)").matches) {
            cmView.current.contentDOM.focus();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    // Update editor when code passed as prop from outside sandpack changes
    React__namespace.useEffect(function () {
        if (cmView.current && code !== internalCode) {
            var view = cmView.current;
            var selection = view.state.selection.ranges.some(function (_a) {
                var to = _a.to, from = _a.from;
                return to > code.length || from > code.length;
            })
                ? state.EditorSelection.cursor(code.length)
                : view.state.selection;
            var changes = { from: 0, to: view.state.doc.length, insert: code };
            view.dispatch({ changes: changes, selection: selection });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [code]);
    React__namespace.useEffect(function messageToInlineError() {
        if (!showInlineErrors)
            return;
        var unsubscribe = listen(function (message) {
            var view = cmView.current;
            if (message.type === "success") {
                view === null || view === void 0 ? void 0 : view.dispatch({
                    // @ts-ignore
                    annotations: [new state.Annotation("remove-errors", true)]
                });
            }
            else if (message.type === "action" &&
                message.action === "show-error" &&
                message.path === filePath &&
                message.line) {
                view === null || view === void 0 ? void 0 : view.dispatch({
                    // @ts-ignore
                    annotations: [new state.Annotation("show-error", message.line)]
                });
            }
        });
        return function () { return unsubscribe(); };
    }, [listen, showInlineErrors]);
    var handleContainerKeyDown = function (evt) {
        if (evt.key === "Enter" && cmView.current) {
            evt.preventDefault();
            cmView.current.contentDOM.focus();
        }
    };
    var gutterLineOffset = function () {
        // padding-left
        var offset = 4;
        if (showLineNumbers) {
            // line-number-gutter-width + gutter-padding
            offset += 6;
        }
        // line-padding
        if (!readOnly) {
            offset += 1;
        }
        return "var(--" + THEME_PREFIX + "-space-" + offset + ")";
    };
    if (readOnly) {
        return (React__namespace.createElement(React__namespace.Fragment, null,
            React__namespace.createElement("pre", { ref: combinedRef, className: classNames(c("cm", editorState, languageExtension), cmClassName, tokensClassName), translate: "no" },
                React__namespace.createElement("code", { className: classNames(c("pre-placeholder"), placeholderClassName), style: { marginLeft: gutterLineOffset() } }, syntaxHighlightRender)),
            readOnly && showReadOnly && (React__namespace.createElement("span", __assign({ className: classNames(c("read-only"), readOnlyClassName) }, ({})), "Read-only"))));
    }
    return (React__namespace.createElement("div", { ref: combinedRef, "aria-autocomplete": "list", "aria-label": filePath ? "Code Editor for " + getFileName(filePath) : "Code Editor", "aria-multiline": "true", className: classNames(c("cm", editorState, languageExtension), cmClassName, tokensClassName), onKeyDown: handleContainerKeyDown, role: "textbox", tabIndex: 0, translate: "no", suppressHydrationWarning: true },
        React__namespace.createElement("pre", { className: classNames(c("pre-placeholder"), placeholderClassName), style: { marginLeft: gutterLineOffset() } }, syntaxHighlightRender)));
});

/**
 * @category Components
 */
var SandpackCodeEditor = React__namespace.forwardRef(function (_a, ref) {
    var style = _a.style, showTabs = _a.showTabs, _b = _a.showLineNumbers, showLineNumbers = _b === void 0 ? false : _b, _c = _a.showInlineErrors, showInlineErrors = _c === void 0 ? false : _c, _d = _a.showRunButton, showRunButton = _d === void 0 ? true : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.closableTabs, closableTabs = _f === void 0 ? false : _f, initMode = _a.initMode, extensions = _a.extensions, extensionsKeymap = _a.extensionsKeymap, id = _a.id, readOnly = _a.readOnly, showReadOnly = _a.showReadOnly, additionalLanguages = _a.additionalLanguages;
    var sandpack = useSandpack().sandpack;
    var _g = useActiveCode(), code = _g.code, updateCode = _g.updateCode, readOnlyFile = _g.readOnly;
    var activeFile = sandpack.activeFile, status = sandpack.status, editorState = sandpack.editorState;
    var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;
    var c = classer.useClasser(THEME_PREFIX);
    var handleCodeUpdate = function (newCode) {
        updateCode(newCode);
    };
    return (React__namespace.createElement(SandpackStack, { className: c("editor"), style: style },
        shouldShowTabs && React__namespace.createElement(FileTabs, { closableTabs: closableTabs }),
        React__namespace.createElement("div", { className: classNames(c("code-editor"), editorClassName) },
            React__namespace.createElement(CodeMirror, { key: activeFile, ref: ref, additionalLanguages: additionalLanguages, code: code, editorState: editorState, extensions: extensions, extensionsKeymap: extensionsKeymap, filePath: activeFile, id: id, initMode: initMode || sandpack.initMode, onCodeUpdate: handleCodeUpdate, readOnly: readOnly || readOnlyFile, showInlineErrors: showInlineErrors, showLineNumbers: showLineNumbers, showReadOnly: showReadOnly, wrapContent: wrapContent }),
            showRunButton && status === "idle" ? React__namespace.createElement(RunButton$1, null) : null)));
});

/**
 * @category Components
 */
var SandpackCodeViewer = React__namespace.forwardRef(function (_a, ref) {
    var showTabs = _a.showTabs, showLineNumbers = _a.showLineNumbers, decorators = _a.decorators, propCode = _a.code, initMode = _a.initMode, wrapContent = _a.wrapContent, props = __rest(_a, ["showTabs", "showLineNumbers", "decorators", "code", "initMode", "wrapContent"]);
    var sandpack = useSandpack().sandpack;
    var code = useActiveCode().code;
    var c = classer.useClasser(THEME_PREFIX);
    var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;
    return (React__namespace.createElement(SandpackStack, __assign({}, props),
        shouldShowTabs ? React__namespace.createElement(FileTabs, null) : null,
        React__namespace.createElement("div", { className: classNames(c("code-editor"), editorClassName) },
            React__namespace.createElement(CodeMirror, { ref: ref, code: propCode !== null && propCode !== void 0 ? propCode : code, decorators: decorators, filePath: sandpack.activeFile, initMode: initMode || sandpack.initMode, showLineNumbers: showLineNumbers, showReadOnly: false, wrapContent: wrapContent, readOnly: true })),
        sandpack.status === "idle" ? React__namespace.createElement(RunButton$1, null) : null));
});

var _a$2, _b;
/**
 * @hidden
 */
var layoutClassName = css((_a$2 = {
        border: "1px solid $colors$surface2",
        display: "flex",
        flexWrap: "wrap",
        alignItems: "stretch",
        borderRadius: "$border$radius",
        overflow: "hidden",
        position: "relative",
        backgroundColor: "$colors$surface2",
        gap: 1
    },
    _a$2["> ." + stackClassName] = {
        flexGrow: 1,
        flexShrink: 1,
        flexBasis: "0",
        height: "$layout$height",
        "@media print": {
            height: "auto",
            display: "block"
        },
        "@media screen and (max-width: 768px)": (_b = {},
            _b["&:not(." + THEME_PREFIX + "-preview, ." + THEME_PREFIX + "-editor, ." + THEME_PREFIX + "-preset-column)"] = {
                height: "calc($layout$height / 2)"
            },
            /* triggers the layout break at the 768px breakpoint, not when the component is less then 700px */
            _b.minWidth = "100%",
            _b)
    },
    _a$2["> ." + THEME_PREFIX + "-file-explorer"] = {
        flex: 0.2,
        minWidth: 200,
        "@media screen and (max-width: 768px)": {
            "&": {
                minWidth: "100% !important"
            }
        }
    },
    _a$2));
/**
 * @category Components
 */
var SandpackLayout = React__namespace.forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, props = __rest(_a, ["children", "className"]);
    var sandpack = useSandpack().sandpack;
    var c = classer.useClasser(THEME_PREFIX);
    var combinedRef = useCombinedRefs(sandpack.lazyAnchorRef, ref);
    return (React__namespace.createElement("div", __assign({ ref: combinedRef, className: classNames(c("layout"), layoutClassName, className) }, props), children));
});

/**
 * @category Hooks
 */
var useErrorMessage = function () {
    var _a;
    var sandpack = useSandpack().sandpack;
    var error = sandpack.error;
    React__namespace.useEffect(function () {
        sandpack.errorScreenRegisteredRef.current = true;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : null;
};

/**
 * @category Components
 */
var ErrorOverlay = function (_a) {
    var children = _a.children, className = _a.className, props = __rest(_a, ["children", "className"]);
    var errorMessage = useErrorMessage();
    var c = classer.useClasser(THEME_PREFIX);
    if (!errorMessage && !children) {
        return null;
    }
    return (React__namespace.createElement("div", __assign({ className: classNames(c("overlay", "error"), absoluteClassName, errorClassName, className), translate: "no" }, props),
        React__namespace.createElement("div", { className: classNames(c("error-message"), errorMessageClassName) }, errorMessage || children)));
};

/**
 * @hidden
 */
var FADE_ANIMATION_DURATION = 200;
/**
 * @category Hooks
 */
var useLoadingOverlayState = function (clientId, externalLoading) {
    var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen;
    var _b = React__namespace.useState("LOADING"), state = _b[0], setState = _b[1];
    /**
     * Sandpack listener
     */
    React__namespace.useEffect(function () {
        sandpack.loadingScreenRegisteredRef.current = true;
        var unsubscribe = listen(function (message) {
            if (message.type === "start" && message.firstLoad === true) {
                setState("LOADING");
            }
            if (message.type === "done") {
                setState(function (prev) {
                    return prev === "LOADING" ? "PRE_FADING" : "HIDDEN";
                });
            }
        }, clientId);
        return function () {
            unsubscribe();
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [clientId, sandpack.status === "idle"]);
    /**
     * Fading transient state
     */
    React__namespace.useEffect(function () {
        var fadeTimeout;
        if (state === "PRE_FADING" && !externalLoading) {
            setState("FADING");
        }
        else if (state === "FADING") {
            fadeTimeout = setTimeout(function () { return setState("HIDDEN"); }, FADE_ANIMATION_DURATION);
        }
        return function () {
            clearTimeout(fadeTimeout);
        };
    }, [state, externalLoading]);
    if (sandpack.status === "timeout") {
        return "TIMEOUT";
    }
    if (sandpack.status !== "running") {
        return "HIDDEN";
    }
    return state;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var getParameters = function (parameters) {
    return LZString__default.default.compressToBase64(JSON.stringify(parameters))
        .replace(/\+/g, "-") // Convert '+' to '-'
        .replace(/\//g, "_") // Convert '/' to '_'
        .replace(/=+$/, "");
}; /* Remove ending '='*/
var CSB_URL = "https://codesandbox.io/api/v1/sandboxes/define";
var getFileParameters = function (files, environment) {
    var normalizedFiles = Object.keys(files).reduce(function (prev, next) {
        var _a;
        var fileName = next.replace("/", "");
        var value = {
            content: files[next].code,
            isBinary: false
        };
        return __assign(__assign({}, prev), (_a = {}, _a[fileName] = value, _a));
    }, {});
    return getParameters(__assign({ files: normalizedFiles }, (environment ? { template: environment } : null)));
};
/**
 * @category Components
 */
var UnstyledOpenInCodeSandboxButton = function (_a) {
    var _b, _c, _d;
    var children = _a.children, props = __rest(_a, ["children"]);
    var sandpack = useSandpack().sandpack;
    var formRef = React__namespace.useRef(null);
    var _e = React__namespace.useState(), paramsValues = _e[0], setParamsValues = _e[1];
    React__namespace.useEffect(function debounce() {
        var timer = setTimeout(function () {
            var params = getFileParameters(sandpack.files, sandpack.environment);
            var searchParams = new URLSearchParams({
                parameters: params,
                query: new URLSearchParams({
                    file: sandpack.activeFile,
                    utm_medium: "sandpack"
                }).toString()
            });
            setParamsValues(searchParams);
        }, 600);
        return function () {
            clearTimeout(timer);
        };
    }, [sandpack.activeFile, sandpack.environment, sandpack.files]);
    /**
     * Register the usage of the codesandbox link
     */
    React__namespace.useEffect(function registerUsage() {
        sandpack.openInCSBRegisteredRef.current = true;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    /**
     * This is a safe limit to avoid too long requests (401),
     * as all parameters are attached in the URL
     */
    if (((_d = (_c = (_b = paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.get) === null || _b === void 0 ? void 0 : _b.call(paramsValues, "parameters")) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 1500) {
        return (React__namespace.createElement("button", __assign({ onClick: function () { var _a; return (_a = formRef.current) === null || _a === void 0 ? void 0 : _a.submit(); }, title: "Open in CodeSandbox" }, props),
            React__namespace.createElement("form", { ref: formRef, action: CSB_URL, method: "POST", style: { visibility: "hidden" }, target: "_blank" }, Array.from(paramsValues, function (_a) {
                var key = _a[0], value = _a[1];
                return (React__namespace.createElement("input", { key: key, name: key, type: "hidden", value: value }));
            })),
            children));
    }
    return (React__namespace.createElement("a", __assign({ href: CSB_URL + "?" + (paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.toString()), rel: "noreferrer noopener", target: "_blank", title: "Open in CodeSandbox" }, props), children));
};

/**
 * @category Components
 */
var OpenInCodeSandboxButton = function () {
    var c = classer.useClasser(THEME_PREFIX);
    return (React__namespace.createElement(UnstyledOpenInCodeSandboxButton, { className: classNames(c("button", "icon-standalone"), buttonClassName, iconStandaloneClassName, roundedButtonClassName) },
        React__namespace.createElement(ExportIcon, null)));
};

var _a$1;
var cubeClassName = css({
    transform: "translate(-4px, 9px) scale(0.13, 0.13)",
    "*": { position: "absolute", width: "96px", height: "96px" }
});
var wrapperClassName$1 = css((_a$1 = {
        position: "absolute",
        right: "$space$2",
        bottom: "$space$2",
        zIndex: "$top",
        width: "32px",
        height: "32px",
        borderRadius: "$border$radius"
    },
    _a$1["." + cubeClassName] = { display: "flex" },
    _a$1["." + buttonClassName] = { display: "none" },
    _a$1["&:hover ." + buttonClassName] = { display: "flex" },
    _a$1["&:hover ." + cubeClassName] = { display: "none" },
    _a$1));
var cubeRotate = keyframes({
    "0%": {
        transform: "rotateX(-25.5deg) rotateY(45deg)"
    },
    "100%": {
        transform: "rotateX(-25.5deg) rotateY(405deg)"
    }
});
var sidesClassNames = css({
    animation: cubeRotate + " 1s linear infinite",
    animationFillMode: "forwards",
    transformStyle: "preserve-3d",
    transform: "rotateX(-25.5deg) rotateY(45deg)",
    "*": {
        border: "10px solid $colors$clickable",
        borderRadius: "8px",
        background: "$colors$surface1"
    },
    ".top": {
        transform: "rotateX(90deg) translateZ(44px)",
        transformOrigin: "50% 50%"
    },
    ".bottom": {
        transform: "rotateX(-90deg) translateZ(44px)",
        transformOrigin: "50% 50%"
    },
    ".front": {
        transform: "rotateY(0deg) translateZ(44px)",
        transformOrigin: "50% 50%"
    },
    ".back": {
        transform: "rotateY(-180deg) translateZ(44px)",
        transformOrigin: "50% 50%"
    },
    ".left": {
        transform: "rotateY(-90deg) translateZ(44px)",
        transformOrigin: "50% 50%"
    },
    ".right": {
        transform: "rotateY(90deg) translateZ(44px)",
        transformOrigin: "50% 50%"
    }
});
var Loading = function (_a) {
    var className = _a.className, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, ["className", "showOpenInCodeSandbox"]);
    var c = classer.useClasser(THEME_PREFIX);
    return (React__namespace.createElement("div", __assign({ className: classNames(c("cube-wrapper"), wrapperClassName$1, className), title: "Open in CodeSandbox" }, props),
        showOpenInCodeSandbox && React__namespace.createElement(OpenInCodeSandboxButton, null),
        React__namespace.createElement("div", { className: classNames(c("cube"), cubeClassName) },
            React__namespace.createElement("div", { className: classNames(c("sides"), sidesClassNames) },
                React__namespace.createElement("div", { className: "top" }),
                React__namespace.createElement("div", { className: "right" }),
                React__namespace.createElement("div", { className: "bottom" }),
                React__namespace.createElement("div", { className: "left" }),
                React__namespace.createElement("div", { className: "front" }),
                React__namespace.createElement("div", { className: "back" })))));
};

var loadingClassName = css({
    backgroundColor: "$colors$surface1"
});
/**
 * @category Components
 */
var LoadingOverlay = function (_a) {
    var clientId = _a.clientId, loading = _a.loading, className = _a.className, style = _a.style, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, ["clientId", "loading", "className", "style", "showOpenInCodeSandbox"]);
    var loadingOverlayState = useLoadingOverlayState(clientId, loading);
    var c = classer.useClasser(THEME_PREFIX);
    if (loadingOverlayState === "HIDDEN") {
        return null;
    }
    if (loadingOverlayState === "TIMEOUT") {
        return (React__namespace.createElement("div", __assign({ className: classNames(c("overlay", "error"), absoluteClassName, errorClassName, className) }, props),
            React__namespace.createElement("div", { className: classNames(c("error-message"), errorMessageClassName) },
                "Unable to establish connection with the sandpack bundler. Make sure you are online or try again later. If the problem persists, please report it via",
                " ",
                React__namespace.createElement("a", { className: classNames(c("error-message"), errorMessageClassName), href: "mailto:hello@codesandbox.io?subject=Sandpack Timeout Error" }, "email"),
                " ",
                "or submit an issue on",
                " ",
                React__namespace.createElement("a", { className: classNames(c("error-message"), errorMessageClassName), href: "https://github.com/codesandbox/sandpack/issues", rel: "noreferrer noopener", target: "_blank" }, "GitHub."))));
    }
    var stillLoading = loadingOverlayState === "LOADING" || loadingOverlayState === "PRE_FADING";
    return (React__namespace.createElement("div", __assign({ className: classNames(c("overlay", "loading"), absoluteClassName, loadingClassName, className), style: __assign(__assign({}, style), { opacity: stillLoading ? 1 : 0, transition: "opacity " + FADE_ANIMATION_DURATION + "ms ease-out" }) }, props),
        React__namespace.createElement(Loading, { showOpenInCodeSandbox: showOpenInCodeSandbox })));
};

var explorerClassName = css({
    borderRadius: "0",
    width: "100%",
    padding: 0,
    marginBottom: "$space$2",
    span: {
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
    },
    svg: {
        marginRight: "$space$1"
    }
});
var File = function (_a) {
    var selectFile = _a.selectFile, path = _a.path, active = _a.active, onClick = _a.onClick, depth = _a.depth, isDirOpen = _a.isDirOpen;
    var c = classer.useClasser(THEME_PREFIX);
    var onClickButton = function (event) {
        if (selectFile) {
            selectFile(path);
        }
        onClick === null || onClick === void 0 ? void 0 : onClick(event);
    };
    var fileName = path.split("/").filter(Boolean).pop();
    var getIcon = function () {
        if (selectFile)
            return React__namespace.createElement(FileIcon, null);
        return isDirOpen ? React__namespace.createElement(DirectoryIconOpen, null) : React__namespace.createElement(DirectoryIconClosed, null);
    };
    return (React__namespace.createElement("button", { className: classNames(c("button", "explorer"), buttonClassName, explorerClassName), "data-active": active, onClick: onClickButton, style: { paddingLeft: 18 * depth + "px" }, title: fileName, type: "button" },
        getIcon(),
        React__namespace.createElement("span", null, fileName)));
};

var Directory = function (_a) {
    var prefixedPath = _a.prefixedPath, files = _a.files, selectFile = _a.selectFile, activeFile = _a.activeFile, depth = _a.depth, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles;
    var _b = React__namespace.useState(true), open = _b[0], setOpen = _b[1];
    var toggle = function () { return setOpen(function (prev) { return !prev; }); };
    return (React__namespace.createElement("div", { key: prefixedPath },
        React__namespace.createElement(File, { depth: depth, isDirOpen: open, onClick: toggle, path: prefixedPath + "/" }),
        open && (React__namespace.createElement(ModuleList, { activeFile: activeFile, autoHiddenFiles: autoHiddenFiles, depth: depth + 1, files: files, prefixedPath: prefixedPath, selectFile: selectFile, visibleFiles: visibleFiles }))));
};

var fromPropsToModules = function (_a) {
    var autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, files = _a.files, prefixedPath = _a.prefixedPath;
    var hasVisibleFilesOption = visibleFiles.length > 0;
    /**
     * When visibleFiles or activeFile are set, the hidden and active flags on the files prop are ignored.
     * @see: https://sandpack.codesandbox.io/docs/getting-started/custom-content#visiblefiles-and-activefile
     */
    var filterByHiddenProperty = autoHiddenFiles && !hasVisibleFilesOption;
    var filterByVisibleFilesOption = autoHiddenFiles && !!hasVisibleFilesOption;
    var fileListWithoutPrefix = Object.keys(files)
        .filter(function (filePath) {
        var _a;
        var isValidatedPath = filePath.startsWith(prefixedPath);
        if (filterByVisibleFilesOption) {
            return isValidatedPath && visibleFiles.includes(filePath);
        }
        if (filterByHiddenProperty) {
            return isValidatedPath && !((_a = files[filePath]) === null || _a === void 0 ? void 0 : _a.hidden);
        }
        return isValidatedPath;
    })
        .map(function (file) { return file.substring(prefixedPath.length); });
    var directories = new Set(fileListWithoutPrefix
        .filter(function (file) { return file.includes("/"); })
        .map(function (file) { return "" + prefixedPath + file.split("/")[0] + "/"; }));
    var modules = fileListWithoutPrefix
        .filter(function (file) { return !file.includes("/"); })
        .map(function (file) { return "" + prefixedPath + file; });
    return { directories: Array.from(directories), modules: modules };
};

var ModuleList = function (_a) {
    var _b = _a.depth, depth = _b === void 0 ? 0 : _b, activeFile = _a.activeFile, selectFile = _a.selectFile, prefixedPath = _a.prefixedPath, files = _a.files, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles;
    var _c = fromPropsToModules({
        visibleFiles: visibleFiles,
        autoHiddenFiles: autoHiddenFiles,
        prefixedPath: prefixedPath,
        files: files
    }), directories = _c.directories, modules = _c.modules;
    return (React__namespace.createElement("div", null,
        directories.map(function (dir) { return (React__namespace.createElement(Directory, { key: dir, activeFile: activeFile, autoHiddenFiles: autoHiddenFiles, depth: depth, files: files, prefixedPath: dir, selectFile: selectFile, visibleFiles: visibleFiles })); }),
        modules.map(function (file) { return (React__namespace.createElement(File, { key: file, active: activeFile === file, depth: depth, path: file, selectFile: selectFile })); })));
};

var fileExplorerClassName = css({
    padding: "$space$3",
    overflow: "auto",
    height: "100%"
});
/**
 * @category Components
 */
var SandpackFileExplorer = function (_a) {
    var className = _a.className, _b = _a.autoHiddenFiles, autoHiddenFiles = _b === void 0 ? false : _b, props = __rest(_a, ["className", "autoHiddenFiles"]);
    var sandpack = useSandpack().sandpack;
    return (React__namespace.createElement("div", __assign({ className: classNames(stackClassName, fileExplorerClassName, THEME_PREFIX + "-file-explorer", className) }, props),
        React__namespace.createElement(ModuleList, { activeFile: sandpack.activeFile, autoHiddenFiles: autoHiddenFiles, files: sandpack.files, prefixedPath: "/", selectFile: sandpack.openFile, visibleFiles: sandpack.visibleFilesFromProps })));
};

var splitUrl = function (url) {
    var match = url.match(/(https?:\/\/.*?)\//);
    if (match && match[1]) {
        return [match[1], url.replace(match[1], "")];
    }
    return [url, "/"];
};

var navigatorClassName = css({
    display: "flex",
    alignItems: "center",
    height: "$layout$headerHeight",
    borderBottom: "1px solid $colors$surface2",
    padding: "$space$3 $space$2",
    background: "$colors$surface1"
});
var inputClassName = css({
    backgroundColor: "$colors$surface2",
    color: "$colors$clickable",
    padding: "$space$1 $space$3",
    borderRadius: "99999px",
    border: "1px solid $colors$surface2",
    height: "24px",
    lineHeight: "24px",
    fontSize: "inherit",
    outline: "none",
    flex: 1,
    marginLeft: "$space$4",
    width: "0",
    transition: "background $transitions$default",
    "&:hover": {
        backgroundColor: "$colors$surface3"
    },
    "&:focus": {
        backgroundColor: "$surface1",
        border: "1px solid $colors$accent",
        color: "$colors$base"
    }
});
/**
 * @category Components
 */
var Navigator = function (_a) {
    var _b;
    var clientId = _a.clientId, onURLChange = _a.onURLChange, className = _a.className, props = __rest(_a, ["clientId", "onURLChange", "className"]);
    var _c = React__namespace.useState(""), baseUrl = _c[0], setBaseUrl = _c[1];
    var _d = useSandpack(), sandpack = _d.sandpack, dispatch = _d.dispatch, listen = _d.listen;
    var _e = React__namespace.useState((_b = sandpack.startRoute) !== null && _b !== void 0 ? _b : "/"), relativeUrl = _e[0], setRelativeUrl = _e[1];
    var _f = React__namespace.useState(false), backEnabled = _f[0], setBackEnabled = _f[1];
    var _g = React__namespace.useState(false), forwardEnabled = _g[0], setForwardEnabled = _g[1];
    var c = classer.useClasser(THEME_PREFIX);
    React__namespace.useEffect(function () {
        var unsub = listen(function (message) {
            if (message.type === "urlchange") {
                var url = message.url, back = message.back, forward = message.forward;
                var _a = splitUrl(url), newBaseUrl = _a[0], newRelativeUrl = _a[1];
                setBaseUrl(newBaseUrl);
                setRelativeUrl(newRelativeUrl);
                setBackEnabled(back);
                setForwardEnabled(forward);
            }
        }, clientId);
        return function () { return unsub(); };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var handleInputChange = function (e) {
        var path = e.target.value.startsWith("/")
            ? e.target.value
            : "/" + e.target.value;
        setRelativeUrl(path);
    };
    var handleKeyDown = function (e) {
        if (e.code === "Enter") {
            //  Enter
            e.preventDefault();
            e.stopPropagation();
            if (typeof onURLChange === "function") {
                onURLChange(baseUrl + e.currentTarget.value);
            }
        }
    };
    var handleRefresh = function () {
        dispatch({ type: "refresh" });
    };
    var handleBack = function () {
        dispatch({ type: "urlback" });
    };
    var handleForward = function () {
        dispatch({ type: "urlforward" });
    };
    var buttonsClassNames = classNames(c("button", "icon"), buttonClassName, iconClassName, css({
        minWidth: "$space$6",
        justifyContent: "center"
    }));
    return (React__namespace.createElement("div", __assign({ className: classNames(c("navigator"), navigatorClassName, className) }, props),
        React__namespace.createElement("button", { "aria-label": "Go back one page", className: buttonsClassNames, disabled: !backEnabled, onClick: handleBack, type: "button" },
            React__namespace.createElement(BackwardIcon, null)),
        React__namespace.createElement("button", { "aria-label": "Go forward one page", className: buttonsClassNames, disabled: !forwardEnabled, onClick: handleForward, type: "button" },
            React__namespace.createElement(ForwardIcon, null)),
        React__namespace.createElement("button", { "aria-label": "Refresh page", className: buttonsClassNames, onClick: handleRefresh, type: "button" },
            React__namespace.createElement(RefreshIcon, null)),
        React__namespace.createElement("input", { "aria-label": "Current Sandpack URL", className: classNames(c("input"), inputClassName), name: "Current Sandpack URL", onChange: handleInputChange, onKeyDown: handleKeyDown, type: "text", value: relativeUrl })));
};

/**
 * @category Hooks
 */
var useSandpackNavigation = function (clientId) {
    var dispatch = useSandpack().dispatch;
    return {
        refresh: function () { return dispatch({ type: "refresh" }, clientId); },
        back: function () { return dispatch({ type: "urlback" }, clientId); },
        forward: function () { return dispatch({ type: "urlforward" }, clientId); }
    };
};

function getTranspiledCode(sandpack) {
    var _a, _b;
    var activeFile = sandpack.activeFile, bundlerState = sandpack.bundlerState;
    if (bundlerState == null) {
        return null;
    }
    var tModule = bundlerState.transpiledModules[activeFile + ":"];
    return (_b = (_a = tModule === null || tModule === void 0 ? void 0 : tModule.source) === null || _a === void 0 ? void 0 : _a.compiledCode) !== null && _b !== void 0 ? _b : null;
}
/**
 * @category Hooks
 */
var useTranspiledCode = function () {
    var sandpack = useSandpack().sandpack;
    if (sandpack.status !== "running") {
        return null;
    }
    return getTranspiledCode(sandpack);
};

/**
 * It registers a new sandpack client and returns its instance,
 * listeners, and dispatch function. Using it when creating a custom
 * component to interact directly with the client is recommended.
 * For other cases, use `useSandpack` instead.
 *
 * @category Hooks
 */
var useSandpackClient = function () {
    var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen, dispatch = _a.dispatch;
    var iframeRef = React__namespace.useRef(null);
    var clientId = React__namespace.useRef(generateRandomId());
    React__namespace.useEffect(function () {
        var iframeElement = iframeRef.current;
        var clientIdValue = clientId.current;
        if (iframeElement !== null) {
            sandpack.registerBundler(iframeElement, clientIdValue);
        }
        return function () { return sandpack.unregisterBundler(clientIdValue); };
    }, []);
    var getClient = function () {
        return sandpack.clients[clientId.current] || null;
    };
    return {
        sandpack: sandpack,
        getClient: getClient,
        clientId: clientId.current,
        iframe: iframeRef,
        listen: function (listener) {
            return listen(listener, clientId.current);
        },
        dispatch: function (message) { return dispatch(message, clientId.current); }
    };
};

/**
 * @category Components
 */
var RefreshButton = function (_a) {
    var clientId = _a.clientId;
    var refresh = useSandpackNavigation(clientId).refresh;
    var c = classer.useClasser(THEME_PREFIX);
    return (React__namespace.createElement("button", { className: classNames(c("button", "icon-standalone"), buttonClassName, iconStandaloneClassName, roundedButtonClassName), onClick: refresh, title: "Refresh Sandpack", type: "button" },
        React__namespace.createElement(RefreshIcon, null)));
};

var previewClassName = css({
    flex: 1,
    display: "flex",
    flexDirection: "column",
    background: "white",
    overflow: "auto",
    position: "relative"
});
var previewIframe = css({
    border: "0",
    outline: "0",
    width: "100%",
    height: "100%",
    minHeight: "160px",
    maxHeight: "2000px",
    flex: 1
});
var previewActionsClassName$1 = css({
    display: "flex",
    position: "absolute",
    bottom: "$space$2",
    right: "$space$2",
    zIndex: "$overlay",
    "> *": { marginLeft: "$space$2" }
});
/**
 * @category Components
 */
var SandpackPreview = React__namespace.forwardRef(function (_a, ref) {
    var _b = _a.showNavigator, showNavigator = _b === void 0 ? false : _b, _c = _a.showRefreshButton, showRefreshButton = _c === void 0 ? true : _c, _d = _a.showOpenInCodeSandbox, showOpenInCodeSandbox = _d === void 0 ? true : _d, _e = _a.showSandpackErrorOverlay, showSandpackErrorOverlay = _e === void 0 ? true : _e, _f = _a.actionsChildren, actionsChildren = _f === void 0 ? React__namespace.createElement(React__namespace.Fragment, null) : _f, children = _a.children, className = _a.className, props = __rest(_a, ["showNavigator", "showRefreshButton", "showOpenInCodeSandbox", "showSandpackErrorOverlay", "actionsChildren", "children", "className"]);
    var _g = useSandpackClient(), sandpack = _g.sandpack, listen = _g.listen, iframe = _g.iframe, getClient = _g.getClient, clientId = _g.clientId;
    var _h = React__namespace.useState(null), iframeComputedHeight = _h[0], setComputedAutoHeight = _h[1];
    var status = sandpack.status, errorScreenRegisteredRef = sandpack.errorScreenRegisteredRef, openInCSBRegisteredRef = sandpack.openInCSBRegisteredRef, loadingScreenRegisteredRef = sandpack.loadingScreenRegisteredRef;
    var c = classer.useClasser(THEME_PREFIX);
    // SandpackPreview immediately registers the custom screens/components so the bundler does not render any of them
    openInCSBRegisteredRef.current = true;
    errorScreenRegisteredRef.current = true;
    loadingScreenRegisteredRef.current = true;
    React__namespace.useEffect(function () {
        var unsubscribe = listen(function (message) {
            if (message.type === "resize") {
                setComputedAutoHeight(message.height);
            }
        });
        return unsubscribe;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    React__namespace.useImperativeHandle(ref, function () { return ({
        clientId: clientId,
        getClient: getClient
    }); }, [getClient, clientId]);
    var handleNewURL = function (newUrl) {
        if (!iframe.current) {
            return;
        }
        iframe.current.src = newUrl;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    };
    return (React__namespace.createElement(SandpackStack, __assign({ className: classNames(THEME_PREFIX + "-preview", className) }, props),
        showNavigator && (React__namespace.createElement(Navigator, { clientId: clientId, onURLChange: handleNewURL })),
        React__namespace.createElement("div", { className: classNames(c("preview-container"), previewClassName) },
            React__namespace.createElement("iframe", { ref: iframe, className: classNames(c("preview-iframe"), previewIframe), style: {
                    // set height based on the content only in auto mode
                    // and when the computed height was returned by the bundler
                    height: iframeComputedHeight ? iframeComputedHeight : undefined
                }, title: "Sandpack Preview" }),
            showSandpackErrorOverlay && React__namespace.createElement(ErrorOverlay, null),
            React__namespace.createElement("div", { className: classNames(c("preview-actions"), previewActionsClassName$1) },
                actionsChildren,
                !showNavigator && showRefreshButton && status === "running" && (React__namespace.createElement(RefreshButton, { clientId: clientId })),
                showOpenInCodeSandbox && React__namespace.createElement(OpenInCodeSandboxButton, null)),
            React__namespace.createElement(LoadingOverlay, { clientId: clientId, showOpenInCodeSandbox: showOpenInCodeSandbox }),
            children)));
});

var transpiledCodeClassName = css({
    display: "flex",
    flexDirection: "column",
    width: "100%",
    position: "relative",
    overflow: "auto",
    minHeight: "160px",
    flex: 1
});
/**
 * @category Components
 */
var SandpackTranspiledCode = function (_a) {
    var className = _a.className, props = __rest(_a, ["className"]);
    var sandpack = useSandpack().sandpack;
    var transpiledCode = useTranspiledCode();
    var c = classer.useClasser(THEME_PREFIX);
    var hiddenIframeRef = React__namespace.useRef(null);
    React__namespace.useEffect(function () {
        var hiddenIframe = hiddenIframeRef.current;
        if (hiddenIframe) {
            sandpack.registerBundler(hiddenIframe, "hidden");
        }
        return function () {
            sandpack.unregisterBundler("hidden");
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return (React__namespace.createElement("div", __assign({ className: classNames(c("transpiled-code"), stackClassName, transpiledCodeClassName, className) }, props),
        React__namespace.createElement(SandpackCodeViewer, __assign({ code: transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : "", initMode: sandpack.initMode }, props)),
        React__namespace.createElement("iframe", { ref: hiddenIframeRef, style: { display: "none" }, title: "transpiled sandpack code" }),
        React__namespace.createElement(ErrorOverlay, null),
        React__namespace.createElement(LoadingOverlay, { clientId: "hidden", showOpenInCodeSandbox: false })));
};

var wrapperClassName = css({
    justifyContent: "space-between",
    borderBottom: "1px solid $colors$surface2",
    padding: "$space$3 $space$2",
    fontFamily: "$font$mono",
    maxHeight: "$layout$headerHeight",
    overflowX: "auto",
    whiteSpace: "nowrap"
});
var flexClassName = css({
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    gap: "$space$2"
});
var Header$1 = function (_a) {
    var status = _a.status, suiteOnly = _a.suiteOnly, setSuiteOnly = _a.setSuiteOnly, setVerbose = _a.setVerbose, verbose = _a.verbose, watchMode = _a.watchMode, setWatchMode = _a.setWatchMode, showSuitesOnly = _a.showSuitesOnly;
    var buttonsClassName = classNames(buttonClassName, roundedButtonClassName, css({ padding: "$space$1 $space$3" }));
    return (React__namespace.createElement("div", { className: classNames(wrapperClassName, flexClassName) },
        React__namespace.createElement("div", { className: classNames(flexClassName) },
            React__namespace.createElement("p", { className: classNames(css({
                    lineHeight: 1,
                    margin: 0,
                    color: "$colors$base",
                    fontSize: "$font$size",
                    display: "flex",
                    alignItems: "center",
                    gap: "$space$2"
                })) },
                React__namespace.createElement(ConsoleIcon, null),
                "Tests")),
        React__namespace.createElement("div", { className: classNames(flexClassName) },
            showSuitesOnly && (React__namespace.createElement("button", { className: buttonsClassName, "data-active": suiteOnly, disabled: status === "initialising", onClick: setSuiteOnly }, "Suite only")),
            React__namespace.createElement("button", { className: buttonsClassName, "data-active": verbose, disabled: status === "initialising", onClick: setVerbose }, "Verbose"),
            React__namespace.createElement("button", { className: buttonsClassName, "data-active": watchMode, disabled: status === "initialising", onClick: setWatchMode }, "Watch"))));
};

var RunButton = function (_a) {
    var onClick = _a.onClick;
    var c = classer.useClasser(THEME_PREFIX);
    return (React__namespace.createElement("button", { className: classNames(c("button", "icon-standalone"), buttonClassName, iconStandaloneClassName, roundedButtonClassName), onClick: onClick, title: "Run tests", type: "button" },
        React__namespace.createElement(RunIcon, null)));
};

var setTestTheme = function (isDark) { return ({
    "--test-pass": isDark ? "#18df16" : "#15c213",
    "--test-fail": isDark ? "#df162b" : "#c21325",
    "--test-skip": isDark ? "#eace2b" : "#c2a813",
    "--test-run": isDark ? "#eace2b" : "#c2a813",
    "--test-title": isDark ? "#3fbabe" : "#256c6f"
}); };
var color = css({
    variants: {
        status: {
            pass: { color: "var(--test-pass)" },
            fail: { color: "var(--test-fail)" },
            skip: { color: "var(--test-skip)" },
            title: { color: "var(--test-title)" }
        }
    }
});
var passTextClassName = color({ status: "pass" });
var failTextClassName = color({ status: "fail" });
var skipTextClassName = color({ status: "skip" });
var titleTextClassName = color({ status: "title" });
var background = css({
    variants: {
        status: {
            pass: { background: "var(--test-pass)", color: "$colors$surface1" },
            fail: { background: "var(--test-fail)", color: "$colors$surface1" },
            run: { background: "var(--test-run)", color: "$colors$surface1" }
        }
    }
});
var runBackgroundClassName = background({ status: "run" });
var passBackgroundClassName = background({ status: "pass" });
var failBackgroundClassName = background({ status: "fail" });

var testContainerClassName = css({
    marginLeft: "$space$4"
});
var containerClassName$4 = css({
    marginBottom: "$space$2",
    color: "$colors$clickable"
});
var testClassName = css({
    marginBottom: "$space$2",
    color: "$colors$hover"
});
var durationClassName = css({
    marginLeft: "$space$2"
});
var gapRightClassName = css({
    marginRight: "$space$2"
});
var Tests = function (_a) {
    var tests = _a.tests; _a.style;
    return (React__namespace.default.createElement("div", { className: classNames(testContainerClassName) }, tests.map(function (test) { return (React__namespace.default.createElement("div", { key: test.name, className: classNames(containerClassName$4) },
        test.status === "pass" && (React__namespace.default.createElement("span", { className: classNames(passTextClassName, gapRightClassName) }, "\u2713")),
        test.status === "fail" && (React__namespace.default.createElement("span", { className: classNames(failTextClassName, gapRightClassName) }, "\u2715")),
        test.status === "idle" && (React__namespace.default.createElement("span", { className: classNames(skipTextClassName, gapRightClassName) }, "\u25CB")),
        React__namespace.default.createElement("span", { className: classNames(testClassName) }, test.name),
        test.duration !== undefined && (React__namespace.default.createElement("span", { className: classNames(durationClassName) },
            "(",
            test.duration,
            " ms)")))); })));
};

var getFailingTests = function (block) {
    return getTests(block).filter(function (t) { return t.status === "fail"; });
};
var getTests = function (block) {
    var _a;
    return (_a = Object.values(block.tests)).concat.apply(_a, Object.values(block.describes).map(getTests));
};
var getAllTestResults = function (specs) {
    return specs.map(getSpecTestResults).reduce(function (acc, stats) {
        return {
            pass: acc.pass + stats.pass,
            fail: acc.fail + stats.fail,
            skip: acc.skip + stats.skip,
            total: acc.total + stats.total
        };
    }, { pass: 0, skip: 0, fail: 0, total: 0 });
};
var getSpecTestResults = function (spec) {
    return getTests(spec).reduce(function (acc, test) {
        return {
            pass: test.status === "pass" ? acc.pass + 1 : acc.pass,
            fail: test.status === "fail" ? acc.fail + 1 : acc.fail,
            skip: test.status === "idle" || test.status === "running"
                ? acc.skip + 1
                : acc.skip,
            total: acc.total + 1
        };
    }, { pass: 0, fail: 0, skip: 0, total: 0 });
};
var getAllSuiteResults = function (specs) {
    return specs
        .filter(function (spec) {
        return Object.values(spec.describes).length > 0 ||
            Object.values(spec.tests).length > 0;
    })
        .map(getSpecTestResults)
        .reduce(function (acc, stats) {
        return {
            pass: acc.pass + (stats.fail === 0 ? 1 : 0),
            fail: acc.fail + (stats.fail > 0 ? 1 : 0),
            total: acc.total + 1
        };
    }, { pass: 0, fail: 0, total: 0 });
};
var getDuration = function (specs) {
    return flatMap(specs, getTests).reduce(function (acc, test) { return acc + (test.duration || 0); }, 0);
};
var isEmpty = function (block) {
    return Object.values(block.describes).length === 0 &&
        Object.values(block.tests).length === 0;
};
var splitTail = function (as) {
    var lastIndex = as.length - 1;
    var head = as.slice(0, lastIndex);
    var tail = as[lastIndex];
    return [head, tail];
};
var flatMap = function (as, f) {
    return as.map(f).reduce(function (acc, next) { return acc.concat(next); }, []);
};
var set = function (path, value) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function (object) {
        return cleanSet__default.default(object, path, value);
    };
};

var nameClassName = css({
    color: "$colors$hover",
    marginBottom: "$space$2"
});
var containerClassName$3 = css({
    marginLeft: "$space$4"
});
var Describes = function (_a) {
    var describes = _a.describes;
    return (React__namespace.createElement(React__namespace.Fragment, null, describes.map(function (describe) {
        if (isEmpty(describe)) {
            return null;
        }
        var tests = Object.values(describe.tests);
        var describes = Object.values(describe.describes);
        return (React__namespace.createElement("div", { key: describe.name, className: classNames(containerClassName$3) },
            React__namespace.createElement("div", { className: classNames(nameClassName) }, describe.name),
            React__namespace.createElement(Tests, { tests: tests }),
            React__namespace.createElement(Describes, { describes: describes })));
    })));
};

var containerClassName$2 = css({
    color: "$colors$hover",
    fontSize: "$font$size",
    padding: "$space$2",
    whiteSpace: "pre-wrap"
});
var FormattedError = function (_a) {
    var error = _a.error, path = _a.path;
    return (React__namespace.createElement("div", { className: classNames(containerClassName$2), dangerouslySetInnerHTML: { __html: formatDiffMessage(error, path) } }));
};
var escapeHtml = function (unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
};
var formatDiffMessage = function (error, path) {
    var finalMessage = "";
    if (error.matcherResult) {
        finalMessage = "<span>" + escapeHtml(error.message)
            .replace(/(expected)/m, "<span class=\"" + passTextClassName + "\">$1</span>")
            .replace(/(received)/m, "<span class=\"" + failTextClassName + "\">$1</span>")
            .replace(/(Difference:)/m, "<span>$1</span>")
            .replace(/(Expected:)(.*)/m, "<span>$1</span><span class=\"" + passTextClassName + "\">$2</span>")
            .replace(/(Received:)(.*)/m, "<span>$1</span><span class=\"" + failTextClassName + "\">$2</span>")
            .replace(/^(-.*)/gm, "<span class=\"" + failTextClassName + "\">$1</span>")
            .replace(/^(\+.*)/gm, "<span class=\"" + passTextClassName + "\">$1</span>") + "</span>";
    }
    else {
        finalMessage = escapeHtml(error.message);
    }
    if (error.mappedErrors &&
        error.mappedErrors[0] &&
        error.mappedErrors[0].fileName.endsWith(path) &&
        error.mappedErrors[0]._originalScriptCode) {
        var mappedError = error.mappedErrors[0];
        var _originalScriptCode = mappedError._originalScriptCode || [];
        var widestNumber_1 = Math.max.apply(Math, _originalScriptCode.map(function (code) { return (code.lineNumber + "").length; })) + 2;
        var margin_1 = Array.from({ length: widestNumber_1 }).map(function () { return " "; });
        finalMessage += "<br />";
        finalMessage += "<br />";
        finalMessage += "<div>";
        _originalScriptCode
            .filter(function (s) { return s.content.trim(); })
            .forEach(function (code) {
            var currentLineMargin = (code.lineNumber + "").length;
            var newMargin = __spreadArray([], margin_1, true);
            newMargin.length -= currentLineMargin;
            if (code.highlight) {
                newMargin.length -= 2;
            }
            var toBeIndex = code.content.indexOf(".to");
            var toBeMargin = Array.from({ length: margin_1.length + toBeIndex - (widestNumber_1 - 1) }, function () { return " "; });
            var content = escapeHtml(code.content)
                .replace(/(describe|test|it)(\()(&#039;|&quot;|`)(.*)(&#039;|&quot;|`)/m, "<span>$1$2$3</span><span class=\"" + titleTextClassName + "\">$4</span><span>$5</span>")
                .replace(/(expect\()(.*)(\)\..*)(to[\w\d]*)(\()(.*)(\))/m, "<span>$1</span><span class=\"" + failTextClassName + "\">$2</span><span>$3</span><span style=\"text-decoration: underline; font-weight: 900\">$4</span><span>$5</span><span class=\"" + passTextClassName + "\">$6</span><span>$7</span>");
            finalMessage +=
                "<div " + (code.highlight ? "style=\"font-weight:200;\"" : "") + ">" +
                    (code.highlight
                        ? "<span class=\"" + failTextClassName + "\">></span> "
                        : "") +
                    newMargin.join("") +
                    escapeHtml("" + code.lineNumber) +
                    " | " +
                    content +
                    "</div>" +
                    (code.highlight
                        ? "<div>" +
                            margin_1.join("") +
                            " | " +
                            toBeMargin.join("") +
                            ("<span class=\"" + failTextClassName + "\">^</span>") +
                            "</div>"
                        : "");
        });
        finalMessage += "</div>";
    }
    return finalMessage.replace(/(?:\r\n|\r|\n)/g, "<br />");
};

var fileContainer = css({
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    marginBottom: "$space$2"
});
var gapBottomClassName$1 = css({
    marginBottom: "$space$2"
});
var failTestClassName = css({
    fontWeight: "bold"
});
var labelClassName$1 = css({
    borderRadius: "calc($border$radius / 2)"
});
var specLabelClassName = css({
    padding: "$space$1 $space$2",
    fontFamily: "$font$mono",
    textTransform: "uppercase",
    marginRight: "$space$2"
});
var filePathButtonClassName = css({
    fontFamily: "$font$mono",
    cursor: "pointer",
    display: "inline-block"
});
var filePathClassName = css({
    color: "$colors$clickable",
    textDecorationStyle: "dotted",
    textDecorationLine: "underline"
});
var fileNameClassName = css({
    color: "$colors$hover",
    fontWeight: "bold",
    textDecorationStyle: "dotted",
    textDecorationLine: "underline"
});
var Specs = function (_a) {
    var specs = _a.specs, openSpec = _a.openSpec, status = _a.status, verbose = _a.verbose;
    return (React__namespace.createElement(React__namespace.Fragment, null, specs.map(function (spec) {
        if (spec.error) {
            return (React__namespace.createElement("div", { key: spec.name, className: classNames(gapBottomClassName$1) },
                React__namespace.createElement(SpecLabel, { className: classNames(labelClassName$1, failBackgroundClassName) }, "Error"),
                React__namespace.createElement(FilePath, { onClick: function () { return openSpec(spec.name); }, path: spec.name }),
                React__namespace.createElement(FormattedError, { error: spec.error, path: spec.name })));
        }
        if (isEmpty(spec)) {
            return null;
        }
        var tests = Object.values(spec.tests);
        var describes = Object.values(spec.describes);
        var stats = getSpecTestResults(spec);
        return (React__namespace.createElement("div", { key: spec.name, className: classNames(gapBottomClassName$1) },
            React__namespace.createElement("div", { className: classNames(fileContainer) },
                status === "complete" ? (stats.fail > 0 ? (React__namespace.createElement(SpecLabel, { className: classNames(labelClassName$1, failBackgroundClassName) }, "Fail")) : (React__namespace.createElement(SpecLabel, { className: classNames(labelClassName$1, passBackgroundClassName) }, "Pass"))) : (React__namespace.createElement(SpecLabel, { className: classNames(labelClassName$1, runBackgroundClassName) }, "Run")),
                React__namespace.createElement(FilePath, { onClick: function () { return openSpec(spec.name); }, path: spec.name })),
            verbose && React__namespace.createElement(Tests, { tests: tests }),
            verbose && React__namespace.createElement(Describes, { describes: describes }),
            getFailingTests(spec).map(function (test) {
                return (React__namespace.createElement("div", { key: "failing-" + test.name, className: classNames(gapBottomClassName$1) },
                    React__namespace.createElement("div", { className: classNames(failTestClassName, failTextClassName) },
                        "\u25CF ",
                        test.blocks.join(" › "),
                        " \u203A ",
                        test.name),
                    test.errors.map(function (e) { return (React__namespace.createElement(FormattedError, { key: "failing-" + test.name + "-error", error: e, path: test.path })); })));
            })));
    })));
};
var SpecLabel = function (_a) {
    var children = _a.children, className = _a.className;
    return (React__namespace.createElement("span", { className: classNames(specLabelClassName, className) }, children));
};
var FilePath = function (_a) {
    var onClick = _a.onClick, path = _a.path;
    var parts = path.split("/");
    var basePath = parts.slice(0, parts.length - 1).join("/") + "/";
    var fileName = parts[parts.length - 1];
    return (React__namespace.createElement("button", { className: classNames(buttonClassName, filePathButtonClassName), onClick: onClick },
        React__namespace.createElement("span", { className: classNames(filePathClassName) }, basePath),
        React__namespace.createElement("span", { className: classNames(fileNameClassName) }, fileName)));
};

var gapBottomClassName = css({
    marginBottom: "$space$2"
});
var labelClassName = css({
    fontWeight: "bold",
    color: "$colors$hover",
    whiteSpace: "pre-wrap"
});
var containerClassName$1 = css({
    fontWeight: "bold",
    color: "$colors$clickable"
});
var Summary = function (_a) {
    var suites = _a.suites, tests = _a.tests, duration = _a.duration;
    var widestLabel = "Test suites: ";
    var withMargin = function (label) {
        var difference = widestLabel.length - label.length;
        var margin = Array.from({ length: difference }, function () { return " "; }).join("");
        return label + margin;
    };
    return (React__namespace.createElement("div", { className: classNames(containerClassName$1) },
        React__namespace.createElement("div", { className: classNames(gapBottomClassName) },
            React__namespace.createElement("span", { className: classNames(labelClassName) }, widestLabel),
            suites.fail > 0 && (React__namespace.createElement("span", { className: classNames(failTextClassName) },
                suites.fail,
                " failed,",
                " ")),
            suites.pass > 0 && (React__namespace.createElement("span", { className: classNames(passTextClassName) },
                suites.pass,
                " passed,",
                " ")),
            React__namespace.createElement("span", null,
                suites.total,
                " total")),
        React__namespace.createElement("div", { className: classNames(gapBottomClassName) },
            React__namespace.createElement("span", { className: classNames(labelClassName) }, withMargin("Tests:")),
            tests.fail > 0 && (React__namespace.createElement("span", { className: classNames(failTextClassName) },
                tests.fail,
                " failed,",
                " ")),
            tests.skip > 0 && (React__namespace.createElement("span", { className: classNames(skipTextClassName) },
                tests.skip,
                " skipped,",
                " ")),
            tests.pass > 0 && (React__namespace.createElement("span", { className: classNames(passTextClassName) },
                tests.pass,
                " passed,",
                " ")),
            React__namespace.createElement("span", null,
                tests.total,
                " total")),
        React__namespace.createElement("div", { className: classNames(labelClassName) },
            withMargin("Time:"),
            duration / 1000,
            "s")));
};

var previewActionsClassName = css({
    display: "flex",
    position: "absolute",
    bottom: "$space$2",
    right: "$space$2",
    zIndex: "$overlay",
    "> *": { marginLeft: "$space$2" }
});
var INITIAL_STATE = {
    specs: {},
    status: "initialising",
    verbose: false,
    watchMode: true,
    suiteOnly: false,
    specsCount: 0
};
/**
 * @category Components
 */
var SandpackTests = function (_a) {
    var _b = _a.verbose, verbose = _b === void 0 ? false : _b, _c = _a.watchMode, watchMode = _c === void 0 ? true : _c, style = _a.style, className = _a.className, onComplete = _a.onComplete, actionsChildren = _a.actionsChildren, props = __rest(_a, ["verbose", "watchMode", "style", "className", "onComplete", "actionsChildren"]);
    var theme = useSandpackTheme();
    var _d = useSandpackClient(), getClient = _d.getClient, iframe = _d.iframe, listen = _d.listen, sandpack = _d.sandpack;
    var _e = React__namespace.useState(__assign(__assign({}, INITIAL_STATE), { verbose: verbose, watchMode: watchMode })), state = _e[0], setState = _e[1];
    React__namespace.useEffect(function () {
        var currentDescribeBlocks = [];
        var currentSpec = "";
        var unsubscribe = listen(function (data) {
            // Note: short-circuit if message isn't for the currently active spec when `suiteOnly` is true
            if (state.suiteOnly &&
                (("path" in data && data.path !== sandpack.activeFile) ||
                    ("test" in data &&
                        "path" in data.test &&
                        data.test.path !== sandpack.activeFile))) {
                return;
            }
            if (data.type === "action" &&
                data.action === "clear-errors" &&
                data.source === "jest") {
                currentSpec = data.path;
                return;
            }
            if (data.type === "test") {
                if (data.event === "initialize_tests") {
                    currentDescribeBlocks = [];
                    currentSpec = "";
                    if (state.watchMode) {
                        return runAllTests();
                    }
                    else {
                        return setState(function (oldState) { return (__assign(__assign({}, oldState), { status: "idle", specs: {} })); });
                    }
                }
                if (data.event === "test_count") {
                    return setState(function (oldState) { return (__assign(__assign({}, oldState), { specsCount: data.count })); });
                }
                if (data.event === "total_test_start") {
                    currentDescribeBlocks = [];
                    return setState(function (oldState) { return (__assign(__assign({}, oldState), { status: "running" })); });
                }
                if (data.event === "total_test_end") {
                    return setState(function (oldState) {
                        if (onComplete !== undefined) {
                            onComplete(oldState.specs);
                        }
                        return __assign(__assign({}, oldState), { status: "complete" });
                    });
                }
                if (data.event === "add_file") {
                    return setState(set(["specs", data.path], {
                        describes: {},
                        tests: {},
                        name: data.path
                    }));
                }
                if (data.event === "remove_file") {
                    return setState(function (oldState) {
                        var specs = Object.entries(oldState.specs).reduce(function (acc, _a) {
                            var _b;
                            var key = _a[0], value = _a[1];
                            if (key === data.path) {
                                return acc;
                            }
                            else {
                                return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
                            }
                        }, {});
                        return __assign(__assign({}, oldState), { specs: specs });
                    });
                }
                if (data.event === "file_error") {
                    return setState(set(["specs", data.path, "error"], data.error));
                }
                if (data.event === "describe_start") {
                    currentDescribeBlocks.push(data.blockName);
                    var _a = splitTail(currentDescribeBlocks), describePath = _a[0], currentDescribe = _a[1];
                    var spec = currentSpec;
                    if (currentDescribe === undefined) {
                        return;
                    }
                    return setState(set(__spreadArray(__spreadArray([
                        "specs",
                        spec,
                        "describes"
                    ], flatMap(describePath, function (name) { return [name, "describes"]; }), true), [
                        currentDescribe,
                    ], false), {
                        name: data.blockName,
                        tests: {},
                        describes: {}
                    }));
                }
                if (data.event === "describe_end") {
                    currentDescribeBlocks.pop();
                    return;
                }
                if (data.event === "add_test") {
                    var _b = splitTail(currentDescribeBlocks), describePath = _b[0], currentDescribe = _b[1];
                    var test_1 = {
                        status: "idle",
                        errors: [],
                        name: data.testName,
                        blocks: __spreadArray([], currentDescribeBlocks, true),
                        path: data.path
                    };
                    if (currentDescribe === undefined) {
                        return setState(set(["specs", data.path, "tests", data.testName], test_1));
                    }
                    else {
                        return setState(set(__spreadArray(__spreadArray([
                            "specs",
                            data.path,
                            "describes"
                        ], flatMap(describePath, function (name) { return [name, "describes"]; }), true), [
                            currentDescribe,
                            "tests",
                            data.testName,
                        ], false), test_1));
                    }
                }
                if (data.event === "test_start") {
                    var test_2 = data.test;
                    var _c = splitTail(test_2.blocks), describePath = _c[0], currentDescribe = _c[1];
                    var startedTest = {
                        status: "running",
                        name: test_2.name,
                        blocks: test_2.blocks,
                        path: test_2.path,
                        errors: []
                    };
                    if (currentDescribe === undefined) {
                        return setState(set(["specs", test_2.path, "tests", test_2.name], startedTest));
                    }
                    else {
                        return setState(set(__spreadArray(__spreadArray([
                            "specs",
                            test_2.path,
                            "describes"
                        ], flatMap(describePath, function (name) { return [name, "describes"]; }), true), [
                            currentDescribe,
                            "tests",
                            test_2.name,
                        ], false), startedTest));
                    }
                }
                if (data.event === "test_end") {
                    var test_3 = data.test;
                    var _d = splitTail(test_3.blocks), describePath = _d[0], currentDescribe = _d[1];
                    var endedTest = {
                        status: test_3.status,
                        errors: test_3.errors,
                        duration: test_3.duration,
                        name: test_3.name,
                        blocks: test_3.blocks,
                        path: test_3.path
                    };
                    if (currentDescribe === undefined) {
                        return setState(set(["specs", test_3.path, "tests", test_3.name], endedTest));
                    }
                    else {
                        return setState(set(__spreadArray(__spreadArray([
                            "specs",
                            test_3.path,
                            "describes"
                        ], flatMap(describePath, function (name) { return [name, "describes"]; }), true), [
                            currentDescribe,
                            "tests",
                            test_3.name,
                        ], false), endedTest));
                    }
                }
            }
        });
        return unsubscribe;
    }, [state.suiteOnly, state.watchMode, sandpack.activeFile]);
    var runAllTests = function () {
        setState(function (oldState) { return (__assign(__assign({}, oldState), { status: "running", specs: {} })); });
        var client = getClient();
        if (client) {
            client.dispatch({ type: "run-all-tests" });
        }
    };
    var runSpec = function () {
        setState(function (oldState) { return (__assign(__assign({}, oldState), { status: "running", specs: {} })); });
        var client = getClient();
        if (client) {
            client.dispatch({ type: "run-tests", path: sandpack.activeFile });
        }
    };
    var testFileRegex = /.*\.(test|spec)\.[tj]sx?$/;
    var isSpecOpen = sandpack.activeFile.match(testFileRegex) !== null;
    React__namespace.useEffect(function watchMode() {
        var unsunscribe = listen(function (_a) {
            var type = _a.type;
            if (type === "done" && state.watchMode) {
                if (isSpecOpen) {
                    runSpec();
                }
                else {
                    runAllTests();
                }
            }
        });
        return unsunscribe;
    }, [runSpec, runAllTests, state.watchMode, isSpecOpen]);
    var openSpec = function (file) {
        sandpack.setActiveFile(file);
    };
    var specs = Object.values(state.specs);
    var duration = getDuration(specs);
    var testResults = getAllTestResults(specs);
    var suiteResults = getAllSuiteResults(specs);
    return (React__namespace.createElement(SandpackStack, __assign({ className: classNames(THEME_PREFIX + "-tests", className), style: __assign(__assign({}, setTestTheme(theme.themeMode === "dark")), style) }, props),
        React__namespace.createElement("iframe", { ref: iframe, style: { display: "none" }, title: "Sandpack Tests" }),
        React__namespace.createElement(Header$1, { setSuiteOnly: function () {
                return setState(function (s) { return (__assign(__assign({}, s), { suiteOnly: !s.suiteOnly })); });
            }, setVerbose: function () {
                return setState(function (s) { return (__assign(__assign({}, s), { verbose: !s.verbose })); });
            }, setWatchMode: function () {
                setState(function (s) { return (__assign(__assign({}, s), { watchMode: !s.watchMode })); });
            }, showSuitesOnly: state.specsCount > 1, status: state.status, suiteOnly: state.suiteOnly, verbose: state.verbose, watchMode: state.watchMode }),
        state.status === "running" || state.status === "initialising" ? (React__namespace.createElement(Loading, { showOpenInCodeSandbox: false })) : (React__namespace.createElement("div", { className: previewActionsClassName.toString() },
            actionsChildren,
            React__namespace.createElement(RunButton, { onClick: state.suiteOnly ? runSpec : runAllTests }))),
        React__namespace.createElement("div", { className: classNames(containerClassName) }, specs.length === 0 && state.status === "complete" ? (React__namespace.createElement("div", { className: classNames(fileErrorContainerClassName) },
            React__namespace.createElement("p", null, "No test files found."),
            React__namespace.createElement("p", null,
                "Test match:",
                " ",
                React__namespace.createElement("span", { className: classNames(failTextClassName) }, testFileRegex.toString())))) : (React__namespace.createElement(React__namespace.Fragment, null,
            React__namespace.createElement(Specs, { openSpec: openSpec, specs: specs, status: state.status, verbose: state.verbose }),
            state.status === "complete" && testResults.total > 0 && (React__namespace.createElement(Summary, { duration: duration, suites: suiteResults, tests: testResults })))))));
};
var containerClassName = css({
    padding: "$space$4",
    height: "100%",
    overflow: "auto",
    display: "flex",
    flexDirection: "column",
    position: "relative",
    fontFamily: "$font$mono"
});
var fileErrorContainerClassName = css({
    fontWeight: "bold",
    color: "$colors$base"
});

var Button = function (_a) {
    var onClick = _a.onClick;
    var c = classer.useClasser("sp");
    return (React__namespace.default.createElement("button", { className: classNames(c("button", "icon-standalone"), buttonClassName, iconStandaloneClassName, roundedButtonClassName, css({
            position: "absolute",
            bottom: "$space$2",
            right: "$space$2"
        })), onClick: onClick },
        React__namespace.default.createElement(CleanIcon, null)));
};

var Header = function () {
    return (React__namespace.default.createElement("div", { className: classNames(css({
            borderBottom: "1px solid $colors$surface2",
            padding: "$space$3 $space$2",
            height: "$layout$headerHeight"
        })) },
        React__namespace.default.createElement("p", { className: classNames(css({
                lineHeight: 1,
                margin: 0,
                color: "$colors$base",
                fontSize: "$font$size",
                display: "flex",
                alignItems: "center",
                gap: "$space$2"
            })) },
            React__namespace.default.createElement(ConsoleIcon, null),
            "Console")));
};

var SYNTAX_ERROR_PATTERN = ["SyntaxError: ", "Error in sandbox:"];
var CLEAR_LOG = {
    id: "random",
    method: "clear",
    data: ["Console was cleared"]
};
var TRANSFORMED_TYPE_KEY = "@t";
var CIRCULAR_REF_KEY = "@r";
var MAX_LENGTH_STRING = 10000;
var MAX_NEST_LEVEL = 2;
var MAX_KEYS = 400;
var MAX_MESSAGE_COUNT = MAX_KEYS * 2;

/**
 * It provides an interface to consume the logs from a sandpack client.
 *
 * @category Hooks
 */
var useSandpackConsole = function (props) {
    var _a, _b;
    var _c = React__namespace.useState([]), logs = _c[0], setLogs = _c[1];
    var listen = useSandpack().listen;
    var showSyntaxError = (_a = props === null || props === void 0 ? void 0 : props.showSyntaxError) !== null && _a !== void 0 ? _a : false;
    var maxMessageCount = (_b = props === null || props === void 0 ? void 0 : props.maxMessageCount) !== null && _b !== void 0 ? _b : MAX_MESSAGE_COUNT;
    React__namespace.useEffect(function () {
        var unsubscribe = listen(function (message) {
            if (message.type === "console" && message.codesandbox) {
                if (message.log.find(function (_a) {
                    var method = _a.method;
                    return method === "clear";
                })) {
                    return setLogs([CLEAR_LOG]);
                }
                var logsMessages_1 = showSyntaxError
                    ? message.log
                    : message.log.filter(function (messageItem) {
                        var messagesWithoutSyntaxErrors = messageItem.data.filter(function (dataItem) {
                            if (typeof dataItem !== "string")
                                return true;
                            var matches = SYNTAX_ERROR_PATTERN.filter(function (lookFor) {
                                return dataItem.startsWith(lookFor);
                            });
                            return matches.length === 0;
                        });
                        return messagesWithoutSyntaxErrors.length > 0;
                    });
                if (!logsMessages_1)
                    return;
                setLogs(function (prev) {
                    var messages = __spreadArray(__spreadArray([], prev, true), logsMessages_1, true).filter(function (value, index, self) {
                        return index === self.findIndex(function (s) { return s.id === value.id; });
                    });
                    while (messages.length > MAX_MESSAGE_COUNT) {
                        messages.shift();
                    }
                    return messages;
                });
            }
        }, props === null || props === void 0 ? void 0 : props.clientId);
        return unsubscribe;
    }, [listen, maxMessageCount, props, showSyntaxError]);
    return { logs: logs, reset: function () { return setLogs([]); } };
};

/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-explicit-any */
// Const
var GLOBAL = (function getGlobal() {
    // NOTE: see http://www.ecma-international.org/ecma-262/6.0/index.html#sec-performeval step 10
    var savedEval = eval;
    return savedEval("this");
})();
var ARRAY_BUFFER_SUPPORTED = typeof ArrayBuffer === "function";
var MAP_SUPPORTED = typeof Map === "function";
var SET_SUPPORTED = typeof Set === "function";
var Arithmetic;
(function (Arithmetic) {
    Arithmetic[Arithmetic["infinity"] = 0] = "infinity";
    Arithmetic[Arithmetic["minusInfinity"] = 1] = "minusInfinity";
    Arithmetic[Arithmetic["minusZero"] = 2] = "minusZero";
})(Arithmetic || (Arithmetic = {}));
var transformers = {
    Arithmetic: function (data) {
        if (data === Arithmetic.infinity)
            return Infinity;
        if (data === Arithmetic.minusInfinity)
            return -Infinity;
        if (data === Arithmetic.minusZero)
            return -0;
        return data;
    },
    HTMLElement: function (data) {
        var sandbox = document.implementation.createHTMLDocument("sandbox");
        try {
            var element = sandbox.createElement(data.tagName);
            element.innerHTML = data.innerHTML;
            for (var _i = 0, _a = Object.keys(data.attributes); _i < _a.length; _i++) {
                var attribute = _a[_i];
                try {
                    element.setAttribute(attribute, data.attributes[attribute]);
                }
                catch (_b) {
                    //
                }
            }
            return element;
        }
        catch (e) {
            return data;
        }
    },
    Function: function (data) {
        var tempFun = function () { };
        Object.defineProperty(tempFun, "toString", {
            value: function () { return "function " + data.name + "() {" + data.body + "}"; }
        });
        return tempFun;
    },
    "[[NaN]]": function () {
        return NaN;
    },
    "[[undefined]]": function () {
        return void 0;
    },
    "[[Date]]": function (val) {
        var date = new Date();
        date.setTime(val);
        return date;
    },
    "[[RegExp]]": function (val) {
        return new RegExp(val.src, val.flags);
    },
    "[[Error]]": function (val) {
        var Ctor = GLOBAL[val.name] || Error;
        var err = new Ctor(val.message);
        err.stack = val.stack;
        return err;
    },
    "[[ArrayBuffer]]": function (val) {
        if (ARRAY_BUFFER_SUPPORTED) {
            var buffer = new ArrayBuffer(val.length);
            var view = new Int8Array(buffer);
            view.set(val);
            return buffer;
        }
        return val;
    },
    "[[TypedArray]]": function (val) {
        return typeof GLOBAL[val.ctorName] === "function"
            ? new GLOBAL[val.ctorName](val.arr)
            : val.arr;
    },
    "[[Map]]": function (val) {
        if (MAP_SUPPORTED) {
            // NOTE: new Map(iterable) is not supported by all browsers
            var map = new Map();
            for (var i = 0; i < val.length; i += 2)
                map.set(val[i], val[i + 1]);
            return map;
        }
        var kvArr = [];
        // @ts-ignore
        for (var j = 0; j < val.length; j += 2)
            kvArr.push([val[i], val[i + 1]]);
        return kvArr;
    },
    "[[Set]]": function (val) {
        if (SET_SUPPORTED) {
            // NOTE: new Set(iterable) is not supported by all browsers
            var set = new Set();
            for (var i = 0; i < val.length; i++)
                set.add(val[i]);
            return set;
        }
        return val;
    }
};

/* eslint-disable @typescript-eslint/array-type */
var formatSymbols = function (message) {
    if (typeof message === "string" ||
        typeof message === "number" ||
        message === null) {
        return message;
    }
    else if (Array.isArray(message)) {
        return message.map(formatSymbols);
    }
    else if (typeof message == "object" && TRANSFORMED_TYPE_KEY in message) {
        var type = message[TRANSFORMED_TYPE_KEY];
        var transform = transformers[type];
        return transform(message.data);
    }
    return message;
};
var arrayToString = function (output, references, level) {
    var mergeArray = output.reduce(function (acc, curr, index) {
        return "" + acc + (index ? ", " : "") + fromConsoleToString(curr, references, level);
    }, "");
    return "[" + mergeArray + "]";
};
var objectToString = function (output, references, level) {
    var constructorName = output.constructor.name !== "Object" ? output.constructor.name + " " : "";
    if (level > MAX_NEST_LEVEL) {
        return constructorName;
    }
    var entries = Object.entries(output);
    var formattedObject = Object.entries(output).reduce(function (acc, _a, index) {
        var key = _a[0], value = _a[1];
        var comma = index === 0 ? "" : ", ";
        var breakLine = entries.length > 10 ? "\n  " : "";
        var formatted = fromConsoleToString(value, references, level);
        if (index === MAX_KEYS) {
            return acc + breakLine + "...";
        }
        else if (index > MAX_KEYS) {
            return acc;
        }
        return acc + ("" + comma + breakLine + key + ": ") + formatted;
    }, "");
    return constructorName + "{ " + formattedObject + (entries.length > 10 ? "\n" : " ") + "}";
};
var fromConsoleToString = function (message, references, level) {
    if (level === void 0) { level = 0; }
    try {
        var output = formatSymbols(message);
        if (Array.isArray(output)) {
            return arrayToString(output, references, level + 1);
        }
        switch (typeof output) {
            case "string":
                return ("\"" + output + "\"").slice(0, MAX_LENGTH_STRING);
            case "number":
            case "function":
            case "symbol":
                return output.toString();
            case "boolean":
                return String(output);
            case "undefined":
                return "undefined";
            case "object":
            default:
                if (output instanceof RegExp ||
                    output instanceof Error ||
                    output instanceof Date) {
                    return output.toString();
                }
                if (output === null) {
                    return String(null);
                }
                if (output instanceof HTMLElement) {
                    return output.outerHTML.slice(0, MAX_LENGTH_STRING);
                }
                if (Object.entries(output).length === 0) {
                    return "{}";
                }
                if (CIRCULAR_REF_KEY in output) {
                    if (level > MAX_NEST_LEVEL) {
                        return "Unable to print information";
                    }
                    var newMessage = references[output[CIRCULAR_REF_KEY]];
                    return fromConsoleToString(newMessage, references, level + 1);
                }
                return objectToString(output, references, level + 1);
        }
    }
    catch (_a) {
        return "Unable to print information";
    }
};

var getType = function (message) {
    switch (message) {
        case "warn":
            return "warning";
        case "clear":
            return "clear";
        case "error":
            return "error";
        case "log":
        case "info":
        default:
            return "info";
    }
};

var _a;
/**
 * @category Components
 *
 * `SandpackConsole` is a Sandpack devtool that allows printing
 * the console logs from a Sandpack client. It is designed to be
 * a light version of a browser console, which means that it's
 * limited to a set of common use cases you may encounter when coding.
 */
var SandpackConsole = function (_a) {
    var clientId = _a.clientId, _b = _a.showHeader, showHeader = _b === void 0 ? true : _b, _c = _a.showSyntaxError, showSyntaxError = _c === void 0 ? false : _c, maxMessageCount = _a.maxMessageCount, onLogsChange = _a.onLogsChange, className = _a.className, props = __rest(_a, ["clientId", "showHeader", "showSyntaxError", "maxMessageCount", "onLogsChange", "className"]);
    var _d = useSandpackConsole({
        clientId: clientId,
        maxMessageCount: maxMessageCount,
        showSyntaxError: showSyntaxError
    }), logs = _d.logs, reset = _d.reset;
    var wrapperRef = React__namespace.useRef(null);
    React__namespace.useEffect(function () {
        onLogsChange === null || onLogsChange === void 0 ? void 0 : onLogsChange(logs);
        if (wrapperRef.current) {
            wrapperRef.current.scrollTop = wrapperRef.current.scrollHeight;
        }
    }, [onLogsChange, logs]);
    return (React__namespace.createElement(SandpackStack, __assign({ className: classNames(css({ height: "100%", background: "$surface1" }), THEME_PREFIX + "-console", className) }, props),
        showHeader && React__namespace.createElement(Header, null),
        React__namespace.createElement("div", { ref: wrapperRef, className: classNames(css({ overflow: "auto", scrollBehavior: "smooth" })) }, logs.map(function (_a, logIndex, references) {
            var data = _a.data, id = _a.id, method = _a.method;
            if (!data)
                return null;
            if (Array.isArray(data)) {
                return (React__namespace.createElement(React__namespace.Fragment, { key: id }, data.map(function (msg, msgIndex) {
                    var fixReferences = references.slice(logIndex, references.length);
                    return (React__namespace.createElement("div", { key: id + "-" + msgIndex, className: classNames(consoleItemClassName({ variant: getType(method) })) },
                        React__namespace.createElement(CodeMirror, { code: method === "clear"
                                ? msg
                                : fromConsoleToString(msg, fixReferences), fileType: "js", initMode: "user-visible", showReadOnly: false, readOnly: true, wrapContent: true })));
                })));
            }
            return null;
        })),
        React__namespace.createElement(Button, { onClick: reset })));
};
var consoleItemClassName = css((_a = {
        width: "100%",
        padding: "$space$3 $space$2",
        fontSize: ".85em",
        position: "relative",
        "&:not(:first-child):after": {
            content: "",
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            height: 1,
            background: "$colors$surface3"
        },
        /**
         * Editor reset
         */
        ".sp-cm": {
            padding: 0
        },
        ".cm-editor": {
            background: "none"
        },
        ".cm-content": {
            padding: 0
        }
    },
    _a["." + THEME_PREFIX + "-pre-placeholder"] = {
        margin: "0 !important",
        fontSize: "1em"
    },
    _a.variants = {
        variant: {
            error: {
                color: "$colors$error",
                background: "$colors$errorSurface",
                "&:not(:first-child):after": {
                    background: "$colors$error",
                    opacity: 0.07
                }
            },
            warning: {
                color: "$colors$warning",
                background: "$colors$warningSurface",
                "&:not(:first-child):after": {
                    background: "$colors$warning",
                    opacity: 0.07
                }
            },
            clear: {
                fontStyle: "italic"
            },
            info: {}
        }
    },
    _a));

/**
 * @hidden
 */
var Sandpack = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h;
    var options = _a.options, template = _a.template, customSetup = _a.customSetup, files = _a.files, theme = _a.theme, props = __rest(_a, ["options", "template", "customSetup", "files", "theme"]);
    // fallback values
    options !== null && options !== void 0 ? options : (options = {});
    (_b = options.resizablePanels) !== null && _b !== void 0 ? _b : (options.resizablePanels = true);
    (_c = options.editorWidthPercentage) !== null && _c !== void 0 ? _c : (options.editorWidthPercentage = 50);
    (_d = options.showConsole) !== null && _d !== void 0 ? _d : (options.showConsole = false);
    var codeEditorOptions = {
        showTabs: options.showTabs,
        showLineNumbers: options.showLineNumbers,
        showInlineErrors: options.showInlineErrors,
        wrapContent: options.wrapContent,
        closableTabs: options.closableTabs,
        initMode: options.initMode,
        extensions: (_e = options.codeEditor) === null || _e === void 0 ? void 0 : _e.extensions,
        extensionsKeymap: (_f = options.codeEditor) === null || _f === void 0 ? void 0 : _f.extensionsKeymap,
        readOnly: options.readOnly,
        showReadOnly: options.showReadOnly,
        id: options.id,
        additionalLanguages: (_g = options.codeEditor) === null || _g === void 0 ? void 0 : _g.additionalLanguages
    };
    var providerOptions = {
        /**
         * TS-why: Type 'string | number | symbol' is not assignable to type 'string'
         */
        activeFile: options.activeFile,
        visibleFiles: options.visibleFiles,
        recompileMode: options.recompileMode,
        recompileDelay: options.recompileDelay,
        autorun: options.autorun,
        bundlerURL: options.bundlerURL,
        startRoute: options.startRoute,
        skipEval: options.skipEval,
        fileResolver: options.fileResolver,
        initMode: options.initMode,
        initModeObserverOptions: options.initModeObserverOptions,
        externalResources: options.externalResources,
        logLevel: options.logLevel,
        classes: options.classes
    };
    /**
     * Console
     */
    var _j = React__namespace.useState(options.showConsole), consoleVisibility = _j[0], setConsoleVisibility = _j[1];
    var _k = React__namespace.useState(0), counter = _k[0], setCounter = _k[1];
    var hasRightColumn = options.showConsole || options.showConsoleButton;
    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
    var templateFiles = (_h = SANDBOX_TEMPLATES[template]) !== null && _h !== void 0 ? _h : {};
    var mode = "mode" in templateFiles ? templateFiles.mode : "preview";
    var actionsChildren = options.showConsoleButton ? (React__namespace.createElement(ConsoleCounterButton, { counter: counter, onClick: function () { return setConsoleVisibility(function (prev) { return !prev; }); } })) : undefined;
    /**
     * Resizable
     */
    /* eslint-disable @typescript-eslint/no-explicit-any */
    var dragEventTargetRef = React__namespace.useRef(null);
    var _l = React__namespace.useState(options.editorWidthPercentage), horizontalSize = _l[0], setHorizontalSize = _l[1];
    var _m = React__namespace.useState(70), verticalSize = _m[0], setVerticalSize = _m[1];
    var RightColumn = hasRightColumn ? SandpackStack : React__namespace.Fragment;
    var rightColumnStyle = {
        flexGrow: 100 - horizontalSize,
        flexShrink: 100 - horizontalSize,
        flexBasis: 0,
        width: 100 - horizontalSize + "%",
        gap: consoleVisibility ? 1 : 0,
        height: options.editorHeight
    };
    var topRowStyle = hasRightColumn
        ? {
            flexGrow: verticalSize,
            flexShrink: verticalSize,
            flexBasis: 0,
            overflow: "hidden"
        }
        : rightColumnStyle;
    var onDragMove = function (event) {
        if (!dragEventTargetRef.current)
            return;
        var container = dragEventTargetRef.current.parentElement;
        if (!container)
            return;
        var direction = dragEventTargetRef.current.dataset.direction;
        var isHorizontal = direction === "horizontal";
        var _a = container.getBoundingClientRect(), left = _a.left, top = _a.top, height = _a.height, width = _a.width;
        var offset = isHorizontal
            ? ((event.clientX - left) / width) * 100
            : ((event.clientY - top) / height) * 100;
        var boundaries = Math.min(Math.max(offset, 25), 75);
        if (isHorizontal) {
            setHorizontalSize(boundaries);
        }
        else {
            setVerticalSize(boundaries);
        }
        container.querySelectorAll("." + THEME_PREFIX + "-stack").forEach(function (item) {
            item.style.pointerEvents = "none";
        });
    };
    var stopDragging = function () {
        var _a;
        var container = (_a = dragEventTargetRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
        if (!container)
            return;
        container.querySelectorAll("." + THEME_PREFIX + "-stack").forEach(function (item) {
            item.style.pointerEvents = "";
        });
        dragEventTargetRef.current = null;
    };
    React__namespace.useEffect(function () {
        if (!(options === null || options === void 0 ? void 0 : options.resizablePanels))
            return;
        document.body.addEventListener("mousemove", onDragMove);
        document.body.addEventListener("mouseup", stopDragging);
        return function () {
            document.body.removeEventListener("mousemove", onDragMove);
            document.body.removeEventListener("mouseup", stopDragging);
        };
    }, [options]);
    React__namespace.useEffect(function () {
        var _a;
        setConsoleVisibility((_a = options === null || options === void 0 ? void 0 : options.showConsole) !== null && _a !== void 0 ? _a : false);
    }, [options.showConsole]);
    var rightColumnProps = hasRightColumn
        ? { className: THEME_PREFIX + "-preset-column", style: rightColumnStyle }
        : {};
    return (React__namespace.createElement(SandpackProvider, __assign({ customSetup: customSetup, files: files, options: providerOptions, template: template, theme: theme }, props),
        React__namespace.createElement(SandpackLayout, null,
            React__namespace.createElement(SandpackCodeEditor, __assign({}, codeEditorOptions, { style: {
                    height: options.editorHeight,
                    flexGrow: horizontalSize,
                    flexShrink: horizontalSize,
                    flexBasis: 0,
                    overflow: "hidden"
                } })),
            options.resizablePanels && (React__namespace.createElement("div", { className: classNames(dragHandler({ direction: "horizontal" }), THEME_PREFIX + "-resize-handler"), "data-direction": "horizontal", onMouseDown: function (event) {
                    dragEventTargetRef.current = event.target;
                }, style: { left: "calc(" + horizontalSize + "% - 5px)" } })),
            React__namespace.createElement(RightColumn, __assign({}, rightColumnProps),
                mode === "preview" && (React__namespace.createElement(SandpackPreview, { actionsChildren: actionsChildren, showNavigator: options.showNavigator, showRefreshButton: options.showRefreshButton, style: topRowStyle })),
                mode === "tests" && (React__namespace.createElement(SandpackTests, { actionsChildren: actionsChildren, style: topRowStyle })),
                (options.showConsoleButton || consoleVisibility) && (React__namespace.createElement(React__namespace.Fragment, null,
                    options.resizablePanels && consoleVisibility && (React__namespace.createElement("div", { className: classNames(dragHandler({ direction: "vertical" }), THEME_PREFIX + "-resize-handler"), "data-direction": "vertical", onMouseDown: function (event) {
                            dragEventTargetRef.current = event.target;
                        }, style: { top: "calc(" + verticalSize + "% - 5px)" } })),
                    React__namespace.createElement("div", { className: classNames(consoleWrapper), style: {
                            flexGrow: consoleVisibility ? 100 - verticalSize : 0,
                            flexShrink: consoleVisibility ? 100 - verticalSize : 0,
                            flexBasis: 0
                        } },
                        React__namespace.createElement(SandpackConsole, { onLogsChange: function (logs) { return setCounter(logs.length); }, showHeader: false }))))))));
};
var ConsoleCounterButton = function (_a) {
    var onClick = _a.onClick, counter = _a.counter;
    return (React__namespace.createElement("button", { className: classNames(buttonClassName, iconStandaloneClassName, roundedButtonClassName, buttonCounter), onClick: onClick },
        React__namespace.createElement(ConsoleIcon, null),
        counter > 0 && React__namespace.createElement("span", null, counter)));
};
var dragHandler = css({
    position: "absolute",
    zIndex: "$top",
    variants: {
        direction: {
            vertical: {
                right: 0,
                left: 0,
                height: 10,
                cursor: "ns-resize"
            },
            horizontal: {
                top: 0,
                bottom: 0,
                width: 10,
                cursor: "ew-resize"
            }
        }
    },
    "@media screen and (max-width: 768px)": {
        display: "none"
    }
});
var buttonCounter = css({
    position: "relative",
    span: {
        background: "$colors$clickable",
        color: "$colors$surface1",
        minWidth: 12,
        height: 12,
        padding: "0 2px",
        borderRadius: 12,
        fontSize: 8,
        lineHeight: "12px",
        position: "absolute",
        top: 0,
        right: 0
    }
});
var consoleWrapper = css({
    width: "100%",
    overflow: "hidden"
});

exports.ANGULAR_TEMPLATE = ANGULAR_TEMPLATE;
exports.BackwardIcon = BackwardIcon;
exports.CleanIcon = CleanIcon;
exports.CloseIcon = CloseIcon;
exports.CodeEditor = CodeMirror;
exports.ConsoleIcon = ConsoleIcon;
exports.DirectoryIconClosed = DirectoryIconClosed;
exports.DirectoryIconOpen = DirectoryIconOpen;
exports.ErrorOverlay = ErrorOverlay;
exports.ExportIcon = ExportIcon;
exports.FADE_ANIMATION_DURATION = FADE_ANIMATION_DURATION;
exports.FileIcon = FileIcon;
exports.FileTabs = FileTabs;
exports.ForwardIcon = ForwardIcon;
exports.LoadingOverlay = LoadingOverlay;
exports.Navigator = Navigator;
exports.OpenInCodeSandboxButton = OpenInCodeSandboxButton;
exports.REACT_TEMPLATE = REACT_TEMPLATE;
exports.REACT_TYPESCRIPT_TEMPLATE = REACT_TYPESCRIPT_TEMPLATE;
exports.RefreshButton = RefreshButton;
exports.RefreshIcon = RefreshIcon;
exports.RunButton = RunButton$1;
exports.RunIcon = RunIcon;
exports.SANDBOX_TEMPLATES = SANDBOX_TEMPLATES;
exports.SANDPACK_THEMES = SANDPACK_THEMES;
exports.SOLID_TEMPLATE = SOLID_TEMPLATE;
exports.SVELTE_TEMPLATE = SVELTE_TEMPLATE;
exports.Sandpack = Sandpack;
exports.SandpackCodeEditor = SandpackCodeEditor;
exports.SandpackCodeViewer = SandpackCodeViewer;
exports.SandpackConsole = SandpackConsole;
exports.SandpackConsumer = SandpackConsumer;
exports.SandpackFileExplorer = SandpackFileExplorer;
exports.SandpackLayout = SandpackLayout;
exports.SandpackPreview = SandpackPreview;
exports.SandpackProvider = SandpackProvider;
exports.SandpackProviderClass = SandpackProviderClass;
exports.SandpackReactContext = Sandpack$1;
exports.SandpackStack = SandpackStack;
exports.SandpackTests = SandpackTests;
exports.SandpackThemeConsumer = SandpackThemeConsumer;
exports.SandpackThemeContext = SandpackThemeContext;
exports.SandpackThemeProvider = SandpackThemeProvider;
exports.SandpackTranspiledCode = SandpackTranspiledCode;
exports.TEST_TYPESCRIPT_TEMPLATE = TEST_TYPESCRIPT_TEMPLATE;
exports.UnstyledOpenInCodeSandboxButton = UnstyledOpenInCodeSandboxButton;
exports.VANILLA_TEMPLATE = VANILLA_TEMPLATE;
exports.VANILLA_TYPESCRIPT_TEMPLATE = VANILLA_TYPESCRIPT_TEMPLATE;
exports.VUE_TEMPLATE = VUE_TEMPLATE;
exports.VUE_TEMPLATE_3 = VUE_TEMPLATE_3;
exports.VUE_TS_TEMPLATE_3 = VUE_TS_TEMPLATE_3;
exports.defaultDark = defaultDark;
exports.defaultLight = defaultLight;
exports.getSandpackCssText = getCssText;
exports.layoutClassName = layoutClassName;
exports.stackClassName = stackClassName;
exports.tabButton = tabButton;
exports.useActiveCode = useActiveCode;
exports.useErrorMessage = useErrorMessage;
exports.useLoadingOverlayState = useLoadingOverlayState;
exports.useSandpack = useSandpack;
exports.useSandpackClient = useSandpackClient;
exports.useSandpackConsole = useSandpackConsole;
exports.useSandpackNavigation = useSandpackNavigation;
exports.useSandpackTheme = useSandpackTheme;
exports.useTranspiledCode = useTranspiledCode;
Object.keys(classer).forEach(function (k) {
    if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () { return classer[k]; }
    });
});
